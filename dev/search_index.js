var documenterSearchIndex = {"docs":
[{"location":"contributing/add_game/#add_game-1","page":"Adding New Games","title":"Adding New Games","text":"","category":"section"},{"location":"contributing/add_game/#","page":"Adding New Games","title":"Adding New Games","text":"When adding support for a new game, we recommend that you follow a few conventions that will enable it to work with the game-agnostic utilities in the scripts folder (such as scripts/alphazero.jl).","category":"page"},{"location":"contributing/add_game/#","page":"Adding New Games","title":"Adding New Games","text":"First, create a your-game directory in games. The name of this directory will be used as a string identifier for your game by various scripts. In this directory, create a main.jl file that defines a module YourGame according to the following template:","category":"page"},{"location":"contributing/add_game/#","page":"Adding New Games","title":"Adding New Games","text":"module YourGame\n  export Game, Board\n  include(\"game.jl\")\n  module Training\n    using AlphaZero\n    include(\"params.jl\")\n  end\nend","category":"page"},{"location":"contributing/add_game/#","page":"Adding New Games","title":"Adding New Games","text":"By convention, the name of your module should be the transposition of the game directory's name in upper snake case. Also:","category":"page"},{"location":"contributing/add_game/#","page":"Adding New Games","title":"Adding New Games","text":"games/your-game/game.jl should define your Game type,   following the Game Interface\ngames/your-game/params.jl should define params, Network, netparams and benchmark as explained in the   Connect Four Tutorial.","category":"page"},{"location":"contributing/add_game/#","page":"Adding New Games","title":"Adding New Games","text":"Finally, to register your game, just add \"your-game\" to AVAILABLE_GAMES in scripts/games.jl. If you've done everything correctly, you should be able to launch a training session for your game by running:","category":"page"},{"location":"contributing/add_game/#","page":"Adding New Games","title":"Adding New Games","text":"julia --project --color=yes scripts/alphazero.jl --game your-game train","category":"page"},{"location":"reference/benchmark/#benchmark-1","page":"Benchmark","title":"Benchmark","text":"","category":"section"},{"location":"reference/benchmark/#","page":"Benchmark","title":"Benchmark","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/benchmark/#","page":"Benchmark","title":"Benchmark","text":"Benchmark\nBenchmark.Report","category":"page"},{"location":"reference/benchmark/#AlphaZero.Benchmark","page":"Benchmark","title":"AlphaZero.Benchmark","text":"Utilities to evaluate players against one another.\n\nTypically, between each training iteration, different players that possibly depend on the current neural network compete against a set of baselines.\n\n\n\n\n\n","category":"module"},{"location":"reference/benchmark/#AlphaZero.Benchmark.Report","page":"Benchmark","title":"AlphaZero.Benchmark.Report","text":"Benchmark.Report = Vector{Benchmark.DuelOutcome}\n\nA benchmark report is a vector of Benchmark.DuelOutcome objects.\n\n\n\n\n\n","category":"type"},{"location":"reference/benchmark/#Duels-1","page":"Benchmark","title":"Duels","text":"","category":"section"},{"location":"reference/benchmark/#","page":"Benchmark","title":"Benchmark","text":"Benchmark.Duel\nBenchmark.DuelOutcome\nBenchmark.run","category":"page"},{"location":"reference/benchmark/#AlphaZero.Benchmark.Duel","page":"Benchmark","title":"AlphaZero.Benchmark.Duel","text":"Benchmark.Duel(player, baseline; num_games)\n\nSpecify a duel that consists in num_games games between player and baseline, each of them of type Benchmark.Player.\n\nOptional keyword arguments\n\nreset_every: if set, the MCTS tree is reset every reset_mcts_every games   to avoid running out of memory\ncolor_policy has type ColorPolicy and is ALTERNATE_COLORS   by default\n\n\n\n\n\n","category":"type"},{"location":"reference/benchmark/#AlphaZero.Benchmark.DuelOutcome","page":"Benchmark","title":"AlphaZero.Benchmark.DuelOutcome","text":"Benchmark.DuelOutcome\n\nThe outcome of a duel between two players.\n\nFields\n\nplayer and baseline are String fields containing the names of   both players involved in the duel\navgz is the average reward collected by player\nredundancy is the ratio of duplicate positions encountered during the  evaluation, not counting the initial position. If this number is too high,  you may want to increase the move selection temperature.\nrewards is a vector containing all rewards collected by player   (one per game played)\ntime is the computing time spent running the duel, in seconds\n\n\n\n\n\n","category":"type"},{"location":"reference/benchmark/#AlphaZero.Benchmark.run","page":"Benchmark","title":"AlphaZero.Benchmark.run","text":"Benchmark.run(env::Env, duel::Benchmark.Duel, progress=nothing)\n\nRun a benchmark duel and return a Benchmark.DuelOutcome.\n\nIf a progress is provided, next!(progress) is called after each simulated game.\n\n\n\n\n\n","category":"function"},{"location":"reference/benchmark/#Players-1","page":"Benchmark","title":"Players","text":"","category":"section"},{"location":"reference/benchmark/#","page":"Benchmark","title":"Benchmark","text":"Benchmark.Player\nBenchmark.Full\nBenchmark.NetworkOnly\nBenchmark.MctsRollouts\nBenchmark.MinMaxTS\nBenchmark.Solver","category":"page"},{"location":"reference/benchmark/#AlphaZero.Benchmark.Player","page":"Benchmark","title":"AlphaZero.Benchmark.Player","text":"Benchmark.Player\n\nAbstract type to specify a player that can be featured in a benchmark duel.\n\nSubtypes must implement the following functions:\n\nBenchmark.instantiate(player, nn): instantiate the player specification   into an AbstractPlayer given a neural network\nBenchmark.name(player): return a String describing the player\n\n\n\n\n\n","category":"type"},{"location":"reference/benchmark/#AlphaZero.Benchmark.Full","page":"Benchmark","title":"AlphaZero.Benchmark.Full","text":"Benchmark.Full(params) <: Benchmark.Player\n\nFull AlphaZero player that combines MCTS with the learnt network.\n\nArgument params has type MctsParams.\n\n\n\n\n\n","category":"type"},{"location":"reference/benchmark/#AlphaZero.Benchmark.NetworkOnly","page":"Benchmark","title":"AlphaZero.Benchmark.NetworkOnly","text":"Benchmark.NetworkOnly(;use_gpu=true) <: Benchmark.Player\n\nPlayer that uses the policy output by the learnt network directly, instead of relying on MCTS.\n\n\n\n\n\n","category":"type"},{"location":"reference/benchmark/#AlphaZero.Benchmark.MctsRollouts","page":"Benchmark","title":"AlphaZero.Benchmark.MctsRollouts","text":"Benchmark.MctsRollouts(params) <: Benchmark.Player\n\nPure MCTS baseline that uses rollouts to evaluate new positions.\n\nArgument params has type MctsParams.\n\n\n\n\n\n","category":"type"},{"location":"reference/benchmark/#AlphaZero.Benchmark.MinMaxTS","page":"Benchmark","title":"AlphaZero.Benchmark.MinMaxTS","text":"Benchmark.MinMaxTS(;depth, τ=0.) <: Benchmark.Player\n\nMinmax baseline, which relies on MinMax.Player.\n\n\n\n\n\n","category":"type"},{"location":"reference/benchmark/#AlphaZero.Benchmark.Solver","page":"Benchmark","title":"AlphaZero.Benchmark.Solver","text":"Benchmark.Solver(;ϵ) <: Benchmark.Player\n\nPerfect solver that plays randomly with probability ϵ.\n\n\n\n\n\n","category":"type"},{"location":"reference/benchmark/#Minmax-Baseline-1","page":"Benchmark","title":"Minmax Baseline","text":"","category":"section"},{"location":"reference/benchmark/#","page":"Benchmark","title":"Benchmark","text":"MinMax\nMinMax.Player","category":"page"},{"location":"reference/benchmark/#AlphaZero.MinMax","page":"Benchmark","title":"AlphaZero.MinMax","text":"A simple implementation of the minmax tree search algorithm, to be used as a baseline against AlphaZero. Heuristic board values are provided by the GameInterface.heuristic_value function.\n\n\n\n\n\n","category":"module"},{"location":"reference/benchmark/#AlphaZero.MinMax.Player","page":"Benchmark","title":"AlphaZero.MinMax.Player","text":"MinMax.Player{Game} <: AbstractPlayer{Game}\n\nA stochastic minmax player, to be used as a baseline.\n\nMinMax.Player{Game}(;depth, τ=0.)\n\nThe minmax player explores the game tree exhaustively at depth depth to build an estimate of the Q-value of each available action. Then, it chooses an action as follows:\n\nIf there are winning moves (with value Inf), one of them is picked uniformly at random.\nIf all moves are losing (with value -Inf), one of them is picked uniformly at random.\n\nOtherwise,\n\nIf the temperature τ is zero, a move is picked uniformly among those with maximal Q-value (there is usually only one choice).\nIf the temperature τ is nonzero, the probability of choosing action a is proportional to e^fracq_aCτ where q_a is the Q value of action a and C is the maximum absolute value of all finite Q values, making the decision invariant to rescaling of GameInterface.heuristic_value.\n\n\n\n\n\n","category":"type"},{"location":"reference/networks_library/#networks_library-1","page":"Networks Library","title":"Networks Library","text":"","category":"section"},{"location":"reference/networks_library/#","page":"Networks Library","title":"Networks Library","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/networks_library/#","page":"Networks Library","title":"Networks Library","text":"KNets","category":"page"},{"location":"reference/networks_library/#AlphaZero.KNets","page":"Networks Library","title":"AlphaZero.KNets","text":"This module provides utilities to build neural networks with Knet, along with a library of standard architectures.\n\n\n\n\n\n","category":"module"},{"location":"reference/networks_library/#Knet-Utilities-1","page":"Networks Library","title":"Knet Utilities","text":"","category":"section"},{"location":"reference/networks_library/#","page":"Networks Library","title":"Networks Library","text":"KNets.KNetwork\nKNets.TwoHeadNetwork","category":"page"},{"location":"reference/networks_library/#AlphaZero.KNets.KNetwork","page":"Networks Library","title":"AlphaZero.KNets.KNetwork","text":"KNetwork{Game} <: AbstractNetwork{Game}\n\nAbstract type for neural networks implemented using the Knet framework.\n\nSubtypes are expected to be expressed as the composition of Flux-like layers that implement a functor interface through functions children and mapchildren.\nA custom implementation of regularized_params_ must also be implemented for layers containing parameters that are subject to regularization.\n\nProvided that the above holds, KNetwork implements the full network interface with the following exceptions: Network.HyperParams, Network.hyperparams, Network.forward and Network.on_gpu.\n\n\n\n\n\n","category":"type"},{"location":"reference/networks_library/#AlphaZero.KNets.TwoHeadNetwork","page":"Networks Library","title":"AlphaZero.KNets.TwoHeadNetwork","text":"TwoHeadNetwork{Game} <: KNetwork{G}\n\nAn abstract type for two-head neural networks implemented with Knet.\n\nSubtypes are assumed to have the following fields: hyper, common, vhead and phead. Based on those, an implementation is provided for Network.hyperparams, Network.forward and Network.on_gpu, leaving only Network.HyperParams to be implemented.\n\n\n\n\n\n","category":"type"},{"location":"reference/networks_library/#Networks-Library-1","page":"Networks Library","title":"Networks Library","text":"","category":"section"},{"location":"reference/networks_library/#conv_resnet-1","page":"Networks Library","title":"Convolutional ResNet","text":"","category":"section"},{"location":"reference/networks_library/#","page":"Networks Library","title":"Networks Library","text":"KNets.ResNet\nKNets.ResNetHP","category":"page"},{"location":"reference/networks_library/#AlphaZero.KNets.ResNet","page":"Networks Library","title":"AlphaZero.KNets.ResNet","text":"ResNet{Game} <: TwoHeadNetwork{Game}\n\nThe convolutional residual network architecture that is used in the original AlphaGo Zero paper.\n\n\n\n\n\n","category":"type"},{"location":"reference/networks_library/#AlphaZero.KNets.ResNetHP","page":"Networks Library","title":"AlphaZero.KNets.ResNetHP","text":"ResNetHP\n\nHyperparameters for the convolutional resnet architecture.\n\nParameter Type Default\nnum_blocks Int -\nnum_filters Int -\nconv_kernel_size Tuple{Int, Int} -\nnum_policy_head_filters Int 2\nnum_value_head_filters Int 1\nbatch_norm_momentum Float32 0.6f0\n\nThe trunk of the two-head network consists of num_blocks consecutive blocks. Each block features two convolutional layers with num_filters filters and with kernel size conv_kernel_size. Note that both kernel dimensions must be odd.\n\nDuring training, the network is evaluated in training mode on the whole dataset to compute the loss before it is switched to test model, using big batches. Therefore, it makes sense to use a high batch norm momentum (put a lot of weight on the latest measurement).\n\nAlphaGo Zero Parameters\n\nThe network in the original paper from Deepmind features 20 blocks with 256 filters per convolutional layer.\n\n\n\n\n\n","category":"type"},{"location":"reference/networks_library/#Simple-Network-1","page":"Networks Library","title":"Simple Network","text":"","category":"section"},{"location":"reference/networks_library/#","page":"Networks Library","title":"Networks Library","text":"KNets.SimpleNet\nKNets.SimpleNetHP","category":"page"},{"location":"reference/networks_library/#AlphaZero.KNets.SimpleNet","page":"Networks Library","title":"AlphaZero.KNets.SimpleNet","text":"SimpleNet{Game} <: TwoHeadNetwork{Game}\n\nA simple two-headed architecture with only dense layers.\n\n\n\n\n\n","category":"type"},{"location":"reference/networks_library/#AlphaZero.KNets.SimpleNetHP","page":"Networks Library","title":"AlphaZero.KNets.SimpleNetHP","text":"SimpleNetHP\n\nHyperparameters for the simplenet architecture.\n\nParameter Description\nwidth :: Int Number of neurons on each dense layer\ndepth_common :: Int Number of dense layers in the trunk\ndepth_phead = 1 Number of hidden layers in the actions head\ndepth_vhead = 1 Number of hidden layers in the value  head\nuse_batch_norm = false Use batch normalization between each layer\nbatch_norm_momentum = 0.6f0 Momentum of batch norm statistics updates\n\n\n\n\n\n","category":"type"},{"location":"reference/network/#network_interface-1","page":"Network Interface","title":"Network Interface","text":"","category":"section"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"CurrentModule = AlphaZero.Network","category":"page"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"Network","category":"page"},{"location":"reference/network/#AlphaZero.Network","page":"Network Interface","title":"AlphaZero.Network","text":"A generic, framework agnostic interface for neural networks.\n\n\n\n\n\n","category":"module"},{"location":"reference/network/#Mandatory-Interface-1","page":"Network Interface","title":"Mandatory Interface","text":"","category":"section"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"AbstractNetwork\nHyperParams\nhyperparams\nforward\ntrain!\nset_test_mode!\nparams\nregularized_params","category":"page"},{"location":"reference/network/#AlphaZero.Network.AbstractNetwork","page":"Network Interface","title":"AlphaZero.Network.AbstractNetwork","text":"AbstractNetwork{Game} <: MCTS.Oracle{Game}\n\nAbstract base type for a neural network.\n\nConstructor\n\nAny subtype Network must implement the following constructor:\n\nNetwork(hyperparams)\n\nwhere the expected type of hyperparams is given by HyperParams(Network).\n\n\n\n\n\n","category":"type"},{"location":"reference/network/#AlphaZero.Network.HyperParams","page":"Network Interface","title":"AlphaZero.Network.HyperParams","text":"HyperParams(::Type{<:AbstractNetwork})\n\nReturn the hyperparameter type associated with a given network type.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.hyperparams","page":"Network Interface","title":"AlphaZero.Network.hyperparams","text":"hyperparams(::AbstractNetwork)\n\nReturn the hyperparameters of a network.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.forward","page":"Network Interface","title":"AlphaZero.Network.forward","text":"forward(::AbstractNetwork, boards)\n\nCompute the forward pass of a network on a batch of inputs.\n\nExpect a Float32 tensor boards whose batch dimension is the last one.\n\nReturn a (P, V) triple where:\n\nP is a matrix of size (num_actions, batch_size). It is allowed to put weight on invalid actions (see evaluate).\nV is a row vector of size (1, batch_size)\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.train!","page":"Network Interface","title":"AlphaZero.Network.train!","text":"train!(callback, ::AbstractNetwork, opt::OptimiserSpec, loss, batches, n)\n\nUpdate a given network to fit some data.\n\nopt specifies which optimiser to use.\nloss is a function that maps a batch of samples to a tracked real.\ndata is an iterator over minibatches.\nn is the number of minibatches. If length is defined on data,  we must have length(data) == n. However, not all finite  iterators implement length and thus this argument is needed.\ncallback(i, loss) is called at each step with the batch number i  and the loss on last batch.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.set_test_mode!","page":"Network Interface","title":"AlphaZero.Network.set_test_mode!","text":"set_test_mode!(mode=true)\n\nPut a network in test mode or in training mode. This is relevant for networks featuring layers such as batch normalization layers.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.params","page":"Network Interface","title":"AlphaZero.Network.params","text":"params(::AbstractNetwork)\n\nReturn the collection of trainable parameters of a network.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.regularized_params","page":"Network Interface","title":"AlphaZero.Network.regularized_params","text":"regularized_params(::AbstractNetwork)\n\nReturn the collection of regularized parameters of a network. This usually excludes neuron's biases.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#Conversion-and-Copy-1","page":"Network Interface","title":"Conversion and Copy","text":"","category":"section"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"Base.copy(::AbstractNetwork)\nto_gpu\nto_cpu\non_gpu\nconvert_input\nconvert_output","category":"page"},{"location":"reference/network/#Base.copy-Tuple{AbstractNetwork}","page":"Network Interface","title":"Base.copy","text":"Base.copy(::AbstractNetwork)\n\nReturn a copy of the given network.\n\n\n\n\n\n","category":"method"},{"location":"reference/network/#AlphaZero.Network.to_gpu","page":"Network Interface","title":"AlphaZero.Network.to_gpu","text":"to_gpu(::AbstractNetwork)\n\nReturn a copy of the given network that has been transferred to the GPU if one is available. Otherwise, return the given network untouched.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.to_cpu","page":"Network Interface","title":"AlphaZero.Network.to_cpu","text":"to_cpu(::AbstractNetwork)\n\nReturn a copy of the given network that has been transferred to the CPU or return the given network untouched if it is already on CPU.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.on_gpu","page":"Network Interface","title":"AlphaZero.Network.on_gpu","text":"on_gpu(::AbstractNetwork) :: Bool\n\nTest whether or not a network is located on GPU.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.convert_input","page":"Network Interface","title":"AlphaZero.Network.convert_input","text":"convert_input(::AbstractNetwork, input)\n\nConvert an array (or number) to the right format so that it can be used as an input by a given network.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.convert_output","page":"Network Interface","title":"AlphaZero.Network.convert_output","text":"convert_output(::AbstractNetwork, output)\n\nConvert an array (or number) produced by a neural network to a standard CPU array (or number) type.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#Misc-1","page":"Network Interface","title":"Misc","text":"","category":"section"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"gc","category":"page"},{"location":"reference/network/#AlphaZero.Network.gc","page":"Network Interface","title":"AlphaZero.Network.gc","text":"gc(::AbstractNetwork)\n\nPerform full garbage collection and empty the GPU memory pool.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#Derived-Functions-1","page":"Network Interface","title":"Derived Functions","text":"","category":"section"},{"location":"reference/network/#Evaluation-Function-1","page":"Network Interface","title":"Evaluation Function","text":"","category":"section"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"evaluate","category":"page"},{"location":"reference/network/#AlphaZero.Network.evaluate","page":"Network Interface","title":"AlphaZero.Network.evaluate","text":"evaluate(network::AbstractNetwork, boards, actions_mask)\n\nEvaluate a batch of board positions. This function is a wrapper on forward that puts a zero weight on invalid actions.\n\nArguments\n\nboards is a tensor whose last dimension has size bach_size\nactions_mask is a binary matrix of size (num_actions, batch_size)\n\nReturn\n\nReturn a (P, V, Pinv) triple where:\n\nP is a matrix of size (num_actions, batch_size).\nV is a row vector of size (1, batch_size).\nPinv is a row vector of size (1, batch_size)  that indicates the total probability weight put by the network  on invalid actions for each sample.\n\nAll tensors manipulated by this function have elements of type Float32.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#Oracle-Interface-1","page":"Network Interface","title":"Oracle Interface","text":"","category":"section"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"All subtypes of AbstractNetwork implement the MCTS.Oracle interface through functions:","category":"page"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"MCTS.evaluate\nMCTS.evaluate_batch.","category":"page"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"Since evaluating a neural network on single samples at a time is slow, the latter should be used whenever possible.","category":"page"},{"location":"reference/network/#Misc-2","page":"Network Interface","title":"Misc","text":"","category":"section"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"num_parameters\nnum_regularized_parameters\nmean_weight\ncopy(::AbstractNetwork)","category":"page"},{"location":"reference/network/#AlphaZero.Network.num_parameters","page":"Network Interface","title":"AlphaZero.Network.num_parameters","text":"num_parameters(::AbstractNetwork)\n\nReturn the total number of parameters of a network.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.num_regularized_parameters","page":"Network Interface","title":"AlphaZero.Network.num_regularized_parameters","text":"num_regularized_parameters(::AbstractNetwork)\n\nReturn the total number of regularized parameters of a network.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.mean_weight","page":"Network Interface","title":"AlphaZero.Network.mean_weight","text":"mean_weight(::AbstractNetwork)\n\nReturn the mean absolute value of the regularized parameters of a network.\n\n\n\n\n\n","category":"function"},{"location":"reference/network/#AlphaZero.Network.copy-Tuple{AbstractNetwork}","page":"Network Interface","title":"AlphaZero.Network.copy","text":"copy(::AbstractNetwork; on_gpu, test_mode)\n\nA copy function that also handles CPU/GPU transfers and test/train mode switches.\n\n\n\n\n\n","category":"method"},{"location":"reference/network/#Optimiser-Specification-1","page":"Network Interface","title":"Optimiser Specification","text":"","category":"section"},{"location":"reference/network/#","page":"Network Interface","title":"Network Interface","text":"OptimiserSpec\nCyclicNesterov\nAdam","category":"page"},{"location":"reference/network/#AlphaZero.Network.OptimiserSpec","page":"Network Interface","title":"AlphaZero.Network.OptimiserSpec","text":"OptimiserSpec\n\nAbstract type for an optimiser specification.\n\n\n\n\n\n","category":"type"},{"location":"reference/network/#AlphaZero.Network.CyclicNesterov","page":"Network Interface","title":"AlphaZero.Network.CyclicNesterov","text":"CyclicNesterov(; lr_base, lr_high, lr_low, momentum_low, momentum_high)\n\nSGD optimiser with a cyclic learning rate and cyclic Nesterov momentum.\n\nDuring an epoch, the learning rate goes from lr_low to lr_high and then back to lr_low.\nThe momentum evolves in the opposite way, from high values to low values and then back to high values.\n\n\n\n\n\n","category":"type"},{"location":"reference/network/#AlphaZero.Network.Adam","page":"Network Interface","title":"AlphaZero.Network.Adam","text":"Adam(;lr)\n\nAdam optimiser.\n\n\n\n\n\n","category":"type"},{"location":"reference/omitted/#Miscellaneous-1","page":"Miscellaneous","title":"Miscellaneous","text":"","category":"section"},{"location":"reference/omitted/#","page":"Miscellaneous","title":"Miscellaneous","text":"We gather on this page the documentation of internal utility functions that are omitted from the manual for brievety.","category":"page"},{"location":"reference/omitted/#","page":"Miscellaneous","title":"Miscellaneous","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/omitted/#","page":"Miscellaneous","title":"Miscellaneous","text":"GameType","category":"page"},{"location":"reference/omitted/#AlphaZero.GameType","page":"Miscellaneous","title":"AlphaZero.GameType","text":"GameType(T)\n\nReturn the Game type associated with an object (such as a network, a player, an MCTS environment...)\n\n\n\n\n\n","category":"function"},{"location":"reference/omitted/#","page":"Miscellaneous","title":"Miscellaneous","text":"Modules = [AlphaZero.Util]","category":"page"},{"location":"reference/omitted/#AlphaZero.Util.batches-Tuple{Any,Any}","page":"Miscellaneous","title":"AlphaZero.Util.batches","text":"batches(X, batchsize; partial=false)\n\nTake a data tensor X and split it into batches of fixed size along the last dimension of X.\n\nIf partial=true and the number of samples in X is not a multiple of batchsize, then an additional smaller batch is added at the end (otherwise, it is discarded).  \n\n\n\n\n\n","category":"method"},{"location":"reference/omitted/#AlphaZero.Util.concat_columns-Tuple{Any}","page":"Miscellaneous","title":"AlphaZero.Util.concat_columns","text":"concat_columns(cols) == hcat(cols...) # but faster\n\n\n\n\n\n","category":"method"},{"location":"reference/omitted/#AlphaZero.Util.fix_probvec-Tuple{Any}","page":"Miscellaneous","title":"AlphaZero.Util.fix_probvec","text":"fix_probvec(π)\n\nConvert probability vector π to type Vector{Float32} and renormalize it if necessary.\n\nThis is useful as Distributions.isprobvec can be picky about its input when it does not sum to one due to numerical errors.\n\n\n\n\n\n","category":"method"},{"location":"reference/omitted/#AlphaZero.Util.generate_update_constructor-Tuple{Any}","page":"Miscellaneous","title":"AlphaZero.Util.generate_update_constructor","text":"generate_update_constructor(T)\n\nGenerate a new constructor for immutable type T that enables copying an existing structure while only updating a subset of its fields.\n\nFor example, given the following struct:\n\nstruct Point\n  x :: Int\n  y :: Int\nend\n\nTh generated code is equivalent to:\n\nPoint(pt; x=pt.x, y=pt.y) = Point(x, y)\n\n\n\n\n\n","category":"method"},{"location":"reference/omitted/#AlphaZero.Util.momentum_smoothing-Tuple{Any,Any}","page":"Miscellaneous","title":"AlphaZero.Util.momentum_smoothing","text":"Same smoothing function that is used by Temsorboard to smooth time series.\n\n\n\n\n\n","category":"method"},{"location":"reference/omitted/#AlphaZero.Util.rand_categorical-Tuple{Any}","page":"Miscellaneous","title":"AlphaZero.Util.rand_categorical","text":"Draw a sample from a categorical distribution represented as a probability vector. See fix_probvec.\n\n\n\n\n\n","category":"method"},{"location":"reference/omitted/#AlphaZero.Util.random_batches-Tuple{Any,Tuple,Any}","page":"Miscellaneous","title":"AlphaZero.Util.random_batches","text":"random_batches(convert, data::Tuple, batchsize; partial=false)\n\nTake a tuple of data tensors, shuffle its samples according to a random permutation and split them into a sequence of minibatches.\n\nThe result is a lazy iterator that calls convert on the tensors of each new batch right before returning it. The convert function is typically used to transfer data onto the GPU.\n\nnote: Note\nIn the future, it may be good to deprecate this function along with random_batches_stream and use a standard solution instead, such as Flux.DataLoader.\n\n\n\n\n\n","category":"method"},{"location":"reference/omitted/#AlphaZero.Util.random_batches_stream-Tuple{Any,Tuple,Any}","page":"Miscellaneous","title":"AlphaZero.Util.random_batches_stream","text":"random_batches_stream(convert, data::Tuple, batchsize)\n\nGenerate an infinite stateful iterator of random batches by calling random_batches repeatedly. Every sample is guaranteed to be drawn exactly once per epoch.\n\n\n\n\n\n","category":"method"},{"location":"reference/omitted/#AlphaZero.Util.superpose-Tuple{Any}","page":"Miscellaneous","title":"AlphaZero.Util.superpose","text":"superpose(xs) == cat(xs..., dims=ndims(first(xs))+1) # but faster\n\n\n\n\n\n","category":"method"},{"location":"reference/omitted/#AlphaZero.Util.@printing_errors-Tuple{Any}","page":"Miscellaneous","title":"AlphaZero.Util.@printing_errors","text":"@printing_errors expr\n\nEvaluate expression expr while printing any uncaught exception on stderr.\n\nThis is useful to avoid silent falure of concurrent tasks, as explained in this issue.\n\n\n\n\n\n","category":"macro"},{"location":"tutorial/connect_four/#connect_four-1","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"","category":"section"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"In this section, we demonstrate AlphaZero.jl by training a Connect Four agent without any form of supervision or prior knowledge. Although the game has been solved exactly with Alpha-beta pruning using domain-specific heuristics and optimizations, it is still a great challenge for reinforcement learning.[1]","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"[1]: To the best of our knowledge, none of the many existing Python implementations of AlphaZero are able to learn a player that beats a minmax baseline that plans at depth 2 (on a single desktop computer).","category":"page"},{"location":"tutorial/connect_four/#Setup-1","page":"Training a Connect Four Agent","title":"Setup","text":"","category":"section"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"To run the experiments in this tutorial, we recommend having a CUDA compatible GPU with 4GB of memory or more. A 2GB GPU should work fine but you may have to reduce batch size. Each training iteration took about one hour and a half on a desktop computer with an Intel Core i5 9600K processor and an 8GB Nvidia RTX 2070 GPU.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"note: Note\nTo get optimal performances, it is also recommended to use AlphaZero.jl with Julia 1.5 (nightly), which includes a critical feature that enables CuArrays to force incremental GC collections.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"To download AlphaZero.jl and start a new training session, just run the following:","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"git clone https://github.com/jonathan-laurent/AlphaZero.jl.git\ncd AlphaZero.jl\njulia --project -e \"import Pkg; Pkg.instantiate()\"\njulia --project --color=yes scripts/alphazero.jl --game connect-four train","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Instead of using scripts/alphazero.jl, one can also run the following using the Julia REPL:","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"ENV[\"CUARRAYS_MEMORY_POOL\"] = \"split\"\n\nusing AlphaZero\n\ninclude(\"games/connect-four/main.jl\")\nusing .ConnectFour: Game, Training\n\nconst SESSION_DIR = \"sessions/connect-four\"\n\nsession = AlphaZero.Session(\n    Game,\n    Training.Network{ConnectFour.Game},\n    Training.params,\n    Training.netparams,\n    benchmark=Training.benchmark,\n    dir=SESSION_DIR)\n\nresume!(session)","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"The first line configures CuArrays to use a splitting memory pool, which performs better than the default binned pool on AlphaZero's workload as it does not require to run the garbage collector as frequently. Then, a new AlphaZero session is created with the following arguments:","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Argument Description\nGame Game type, which implements the game interface.\nTraining.Network Network type, which implements the network interface.\nTraining.params AlphaZero parameters.\nTraining.netparams Network hyperparameters.\nTraining.benchmark Benchmark that is run between training iterations.\nSESSION_DIR Directory in which all session files are saved.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"The ConnectFour.Training module specifies some default parameters and benchmarks for the Connect Four game. Its content can be examined in file games/connect-four/params.jl. We copy it here for reference but the most important parts will be discussed specifically in the rest of this tutorial.","category":"page"},{"location":"tutorial/connect_four/#Initial-benchmarks-1","page":"Training a Connect Four Agent","title":"Initial benchmarks","text":"","category":"section"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"After launching the training script for the first time, you should see the following:","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"(Image: Session CLI (init))","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Before the first training iteration and between each iteration, the current AlphaZero agent is benchmarked against some baselines in a series of games (200 in this case) so as to provide a concrete measure of training progress. In this tutorial, we use two baselines:","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"A vanilla MCTS baseline that uses rollouts to estimate the value of new nodes.\nA minmax baseline that plans at depth 5 using a handcrafted heuristic.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Comparing two deterministic players is challenging as deterministic players will always play the same game repeatedly given a unique initial state. To add randomization, all players are instantiated with a small but nonzero move selection temperature.[2]","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"[2]: Note, however, that the minmax baseline is guaranteed to play a winning move whenever it sees one and to avoid moves it can prove to be losing within 5 steps (see MinMax.Player).","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"The redundancy indicator is helpful to diagnose a lack of randomization. It measures the quantity 1 - u  n where u is the total number of unique states that have been encountered (excluding the initial state) and n is the total number of encountered states, excluding the initial state and counting duplicates (see   Benchmark.DuelOutcome).","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"note: On leveraging symmetries\nAnother trick that we use to add randomization is to leverage the symmetry of the Connect Four board with respect to its central vertical axis: at each turn, the board is flipped along its central vertical axis with a fixed probability (see flip_probability).This is one of two ways in which AlphaZero.jl takes advantage of board symmetries, the other one being data augmentation (see use_symmetries). Board symmetries can be declared for new games by implementing the GameInterface.symmetries function.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"As you can see, the AlphaZero agent can still win some games with a randomly initialized network, by relying on search alone for short term tactical decisions.","category":"page"},{"location":"tutorial/connect_four/#Training-1","page":"Training a Connect Four Agent","title":"Training","text":"","category":"section"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"After the initial benchmarks are done, the first training iteration can start. Each training iteration took between 60 and 90 minutes on our hardware. The first iterations are typically on the shorter end, as games of self-play terminate more quickly and the memory buffer has yet to reach its final size.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"(Image: Session CLI (first iteration))","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Each training iteration is composed of a self-play phase and of a learning phase. During the self-play phase, the AlphaZero agent plays a series of 4000 games against itself, running 600 MCTS simulations for each move.[3] Doing so, it records training samples in the memory buffer. Then, during the learning phase, the neural network is updated to fit data in memory. The current neural network is evaluated periodically against the best one seen so far, and replaces it for generating self-play data if it achieves a sufficiently high win rate. For more details, see SelfPlayParams, LearningParams and ArenaParams respectively.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"[3]: Compare those numbers with those of a popular Python implementation, which achieves iterations of similar duration when training its Othello agent but only runs 100 games and 25 MCTS simulations per move.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Between the self-play and learning phase, we perform an analysis of the memory buffer by partitioning samples according to how many moves remained until the end of the game when they were taken. This is useful to monitor how well the neural network performs at different game stages. Separate statistics are also computed for the last batch of collected samples. A description of all measured metrics can be found in Training Reports.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"At the end of every iteration, benchmarks are run, summary plots are generated and the state of the current environment is saved on disk. This way, if training is interrupted for any reason, it can be resumed from the last saved state by simply running scripts/alphazero.jl again.","category":"page"},{"location":"tutorial/connect_four/#Examining-the-current-agent-1","page":"Training a Connect Four Agent","title":"Examining the current agent","text":"","category":"section"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"At any time during training, you can start an interactive command interpreter to investigate the current agent:","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"julia --project --color=yes scripts/alphazero.jl --game connect-four explore","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"(Image: Explorer)","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"If you just want to play, use the play mode instead:","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"julia --project --color=yes scripts/alphazero.jl --game connect-four play","category":"page"},{"location":"tutorial/connect_four/#Experimental-results-1","page":"Training a Connect Four Agent","title":"Experimental results","text":"","category":"section"},{"location":"tutorial/connect_four/#Training-plots-1","page":"Training a Connect Four Agent","title":"Training plots","text":"","category":"section"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Here, we plot the evolution of the win rate of our AlphaZero agent against our two baselines:","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"(Image: Win rate evolution (AlphaZero))","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"It is important to note that the AlphaZero agent is never exposed to those baselines during training and therefore cannot learn from them.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"We also evaluated the performances of the neural network alone against the same baselines: instead of plugging it into MCTS, we just play the action that is assigned the highest prior probability at each state.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"(Image: Win rate evolution (network only))","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Unsurprisingly, the network is initially unable to win a single game. However, it ends up being competitive with the minmax baseline despite not being able to perform any search.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"All summary plots generated during the training of our agent can be downloaded here.","category":"page"},{"location":"tutorial/connect_four/#Benchmark-against-a-perfect-solver-1","page":"Training a Connect Four Agent","title":"Benchmark against a perfect solver","text":"","category":"section"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"(Image: Pons benchark)","category":"page"},{"location":"tutorial/connect_four/#c4-config-1","page":"Training a Connect Four Agent","title":"Full training configuration","text":"","category":"section"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Here, we copy the full content of the configuration file games/connect-four/params.jl for reference.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Note that, in addition to having standard keyword constructors, parameter types have constructors that implement the record update operation from functional languages. For example, Params(p, num_iters=100) builds a Params object that is identical to p for every field, except num_iters which is set to 100.","category":"page"},{"location":"tutorial/connect_four/#","page":"Training a Connect Four Agent","title":"Training a Connect Four Agent","text":"Network = ResNet\n\nnetparams = ResNetHP(\n  num_filters=64,\n  num_blocks=7,\n  conv_kernel_size=(3, 3),\n  num_policy_head_filters=32,\n  num_value_head_filters=32,\n  batch_norm_momentum=0.1)\n\nself_play = SelfPlayParams(\n  num_games=4_000,\n  reset_mcts_every=100,\n  mcts=MctsParams(\n    use_gpu=true,\n    num_workers=64,\n    num_iters_per_turn=600,\n    cpuct=2.0,\n    temperature=StepSchedule(\n      start=1.0,\n      change_at=[10],\n      values=[0.5]),\n    dirichlet_noise_ϵ=0.25,\n    dirichlet_noise_α=1.0))\n\narena = ArenaParams(\n  num_games=200,\n  reset_mcts_every=nothing,\n  flip_probability=0.5,\n  update_threshold=0.1,\n  mcts=MctsParams(\n    self_play.mcts,\n    temperature=StepSchedule(0.1),\n    dirichlet_noise_ϵ=0.05))\n\nlearning = LearningParams(\n  use_position_averaging=true,\n  samples_weighing_policy=LOG_WEIGHT,\n  batch_size=2048,\n  loss_computation_batch_size=2048,\n  optimiser=Adam(lr=1e-3),\n  l2_regularization=1e-4,\n  nonvalidity_penalty=1.,\n  min_checkpoints_per_epoch=1,\n  max_batches_per_checkpoint=1000,\n  num_checkpoints=2)\n\nparams = Params(\n  arena=arena,\n  self_play=self_play,\n  learning=learning,\n  num_iters=80,\n  ternary_rewards=true,\n  use_symmetries=true,\n  memory_analysis=MemAnalysisParams(\n    num_game_stages=4),\n  mem_buffer_size=PLSchedule(\n  [      0,        60],\n  [400_000, 2_000_000]))\n\nbaselines = [\n  Benchmark.MctsRollouts(\n    MctsParams(\n      arena.mcts,\n      num_iters_per_turn=1000,\n      cpuct=1.)),\n  Benchmark.MinMaxTS(depth=5, τ=0.2)]\n\nmake_duel(baseline) =\n  Benchmark.Duel(\n    Benchmark.Full(arena.mcts),\n    baseline,\n    num_games=200,\n    flip_probability=0.5,\n    color_policy=CONTENDER_WHITE)\n\nbenchmark = make_duel.(baselines)","category":"page"},{"location":"reference/params/#params-1","page":"Training Parameters","title":"Training Parameters","text":"","category":"section"},{"location":"reference/params/#","page":"Training Parameters","title":"Training Parameters","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/params/#General-1","page":"Training Parameters","title":"General","text":"","category":"section"},{"location":"reference/params/#","page":"Training Parameters","title":"Training Parameters","text":"Params","category":"page"},{"location":"reference/params/#AlphaZero.Params","page":"Training Parameters","title":"AlphaZero.Params","text":"Params\n\nThe AlphaZero parameters.\n\nParameter Type Default\nself_play SelfPlayParams -\nlearning LearningParams -\narena ArenaParams -\nmemory_analysis Union{Nothing, MemAnalysisParams} nothing\nnum_iters Int -\nuse_symmetries Bool false\nternary_rewards Bool false\nmem_buffer_size PLSchedule{Int} -\n\nExplanation\n\nThe AlphaZero training process consists in num_iters iterations. Each iteration can be decomposed into a self-play phase (see SelfPlayParams) and a learning phase (see LearningParams).\n\nternary_rewards: set to true if the rewards issued by  the game environment always belong to -1 0 1 so that  the logging and profiling tools can take advantage of this property.\nuse_symmetries: if set to true, board symmetries are used for  data augmentation before learning.\nmem_buffer_size: size schedule of the memory buffer, in terms of number  of samples. It is typical to start with a small memory buffer that is grown  progressively so as to wash out the initial low-quality self-play data  more quickly.\nmemory_analysis: parameters for the memory analysis step that is  performed at each iteration (see MemAnalysisParams), or  nothing if no analysis is to be performed.\n\nAlphaGo Zero Parameters\n\nIn the original AlphaGo Zero paper:\n\nAbout 5 millions games of self-play are played across 200 iterations.\nThe memory buffer contains 500K games, which makes about 100M samples as an average game of Go lasts about 200 turns.\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#Self-Play-1","page":"Training Parameters","title":"Self-Play","text":"","category":"section"},{"location":"reference/params/#","page":"Training Parameters","title":"Training Parameters","text":"SelfPlayParams","category":"page"},{"location":"reference/params/#AlphaZero.SelfPlayParams","page":"Training Parameters","title":"AlphaZero.SelfPlayParams","text":"SelfPlayParams\n\nParameters governing self-play.\n\nParameter Type Default\nmcts MctsParams -\nnum_games Int -\nreset_mcts_every Union{Int, Nothing} nothing\ngc_every Union{Int, Nothing} nothing\n\nExplanation\n\nThe gc_every field, when set, forces a full garbage collection and an emptying of the GPU memory pool periodically, the period being specified in terms of a fixed number of games.\nThe MCTS tree is reset every reset_mcts_every games (or never if nothing is passed).\n\nAlphaGo Zero Parameters\n\nIn the original AlphaGo Zero paper, num_games=25_000 (5 millions games of self-play across 200 iterations).\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#Learning-1","page":"Training Parameters","title":"Learning","text":"","category":"section"},{"location":"reference/params/#","page":"Training Parameters","title":"Training Parameters","text":"LearningParams\nSamplesWeighingPolicy","category":"page"},{"location":"reference/params/#AlphaZero.LearningParams","page":"Training Parameters","title":"AlphaZero.LearningParams","text":"LearningParams\n\nParameters governing the learning phase of a training iteration, where the neural network is updated to fit the data in the memory buffer.\n\nParameter Type Default\nuse_gpu Bool true\nuse_position_averaging Bool true\nsamples_weighing_policy SamplesWeighingPolicy -\noptimiser OptimiserSpec -\nl2_regularization Float32 -\nnonvalidity_penalty Float32 1f0\nbatch_size Int -\nloss_computation_batch_size Int -\nmin_checkpoints_per_epoch Float64 -\nmax_batches_per_checkpoint Int -\nnum_checkpoints Int -\n\nDescription\n\nThe neural network goes through num_checkpoints series of n updates using batches of size batch_size drawn from memory, where n is defined as follows:\n\nn = min(max_batches_per_checkpoint, ntotal ÷ min_checkpoints_per_epoch)\n\nwith ntotal the total number of batches in memory. Between each series, the current network is evaluated against the best network so far (see ArenaParams).\n\nnonvalidity_penalty is the multiplicative constant of a loss term that  corresponds to the average probability weight that the network puts on  invalid actions.\nbatch_size is the batch size used for gradient descent.\nloss_computation_batch_size is the batch size that is used to compute the loss between each epochs.\nIf use_position_averaging is set to true, samples in memory that correspond to the same board position are averaged together. The merged sample is reweighted according to samples_weighing_policy.\n\nAlphaGo Zero Parameters\n\nIn the original AlphaGo Zero paper:\n\nThe batch size for gradient updates is 2048.\nThe L2 regularization parameter is set to 10^-4.\nCheckpoints are produced every 1000 training steps, which corresponds to seeing about 20% of the samples in the memory buffer: (1000  2048)  10^7   02.\nIt is unclear how many checkpoints are taken or how many training steps are performed in total.\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#AlphaZero.SamplesWeighingPolicy","page":"Training Parameters","title":"AlphaZero.SamplesWeighingPolicy","text":"SamplesWeighingPolicy\n\nDuring self-play, early board positions are possibly encountered many times across several games. The corresponding samples can be merged together and given a weight W that is a nondecreasing function of the number n of merged samples:\n\nCONSTANT_WEIGHT: W(n) = 1\nLOG_WEIGHT: W(n) = log_2(n) + 1\nLINEAR_WEIGHT: W(n) = n\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#Arena-1","page":"Training Parameters","title":"Arena","text":"","category":"section"},{"location":"reference/params/#","page":"Training Parameters","title":"Training Parameters","text":"ArenaParams","category":"page"},{"location":"reference/params/#AlphaZero.ArenaParams","page":"Training Parameters","title":"AlphaZero.ArenaParams","text":"ArenaParams\n\nParameters that govern the evaluation process that compares the current neural network with the best one seen so far (which is used to generate data).\n\nParameter Type Default\nmcts MctsParams -\nnum_games Int -\nflip_probability Float64 0.\nreset_mcts_every Union{Int, Nothing} nothing\nupdate_threshold Float64 -\n\nExplanation\n\nThe two competing networks are instantiated into two MCTS players of parameter mcts and then play num_games games, switching color after each game.\nThe evaluated network is to replace the current best if its average collected reward is greater or equal than update_threshold.\nThe MCTS trees of both players are reset every reset_mcts_every games (or never if nothing is passed).\nTo add randomization and before every game turn, the game board is \"flipped\" according to a symmetric transformation with probability flip_probability.\n\nRemarks\n\nSee necessary_samples to make an informed choice for num_games.\n\nAlphaGo Zero Parameters\n\nIn the original AlphaGo Zero paper, 400 games are played to evaluate a network and the update_threshold parameter is set to a value that corresponds to a 55% win rate.\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#Memory-Analysis-1","page":"Training Parameters","title":"Memory Analysis","text":"","category":"section"},{"location":"reference/params/#","page":"Training Parameters","title":"Training Parameters","text":"MemAnalysisParams","category":"page"},{"location":"reference/params/#AlphaZero.MemAnalysisParams","page":"Training Parameters","title":"AlphaZero.MemAnalysisParams","text":"MemAnalysisParams\n\nParameters governing the analysis of the memory buffer (for debugging and profiling purposes).\n\nParameter Type Default\nnum_game_stages Int -\n\nExplanation\n\nThe memory analysis consists in partitioning the memory buffer in num_game_stages parts of equal size, according to the number of remaining moves until the end of the game for each sample. Then, the quality of the predictions of the current neural network is evaluated on each subset (see Report.Memory).\n\nThis is useful to get an idea of how the neural network performance varies depending on the game stage (typically, good value estimates for endgame board positions are available earlier in the training process than good values for middlegame positions).\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#MCTS-1","page":"Training Parameters","title":"MCTS","text":"","category":"section"},{"location":"reference/params/#","page":"Training Parameters","title":"Training Parameters","text":"MctsParams","category":"page"},{"location":"reference/params/#AlphaZero.MctsParams","page":"Training Parameters","title":"AlphaZero.MctsParams","text":"Parameters of an MCTS player.\n\nParameter Type Default\nnum_workers Int 1\nuse_gpu Bool false\nnum_iters_per_turn Int -\ncpuct Float64 1.\ntemperature StepSchedule{Float64} StepSchedule(1.)\ndirichlet_noise_ϵ Float64 -\ndirichlet_noise_α Float64 -\n\nExplanation\n\nAn MCTS player picks an action as follows. Given a game state, it launches num_iters_per_turn MCTS iterations that are executed asynchronously on num_workers workers, with UCT exploration constant cpuct.\n\nThen, an action is picked according to the distribution π where π_i  n_i^τ with n_i the number of times that the i^textth action was visited and τ the temperature parameter.\n\nIt is typical to use a high value of the temperature parameter τ during the first moves of a game to increase exploration and then switch to a small value. Therefore, temperature is a StepSchedule.\n\nFor information on parameters cpuct, dirichlet_noise_ϵ and dirichlet_noise_α, see MCTS.Env.\n\nAlphaGo Zero Parameters\n\nIn the original AlphaGo Zero paper:\n\nThe number of MCTS iterations per move is 1600, which corresponds to 0.4s of computation time.\nThe temperature is set to 1 for the 30 first moves and then to an infinitesimal value.\nThe ϵ parameter for the Dirichlet noise is set to 025 and the α parameter to 003, which is consistent with the heuristic of using α = 10n with n the maximum number of possibles moves, which is 19  19 + 1 = 362 in the case of Go.\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#Utilities-1","page":"Training Parameters","title":"Utilities","text":"","category":"section"},{"location":"reference/params/#","page":"Training Parameters","title":"Training Parameters","text":"necessary_samples\nAbstractSchedule\nStepSchedule\nPLSchedule\nCyclicSchedule","category":"page"},{"location":"reference/params/#AlphaZero.necessary_samples","page":"Training Parameters","title":"AlphaZero.necessary_samples","text":"necessary_samples(ϵ, β) = log(1 / β) / (2 * ϵ^2)\n\nCompute the number of times N that a random variable X sim textBer(p) has to be sampled so that if the empirical average of X is greather than 12 + ϵ, then p  12 with probability at least 1-β.\n\nThis bound is based on Hoeffding's inequality .\n\n\n\n\n\n","category":"function"},{"location":"reference/params/#AlphaZero.AbstractSchedule","page":"Training Parameters","title":"AlphaZero.AbstractSchedule","text":"AbstractSchedule{R}\n\nAbstract type for a parameter schedule, which represents a function from nonnegative integers to numbers of type R. Subtypes must implement the getindex operator.\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#AlphaZero.StepSchedule","page":"Training Parameters","title":"AlphaZero.StepSchedule","text":"StepSchedule{R} <: AbstractSchedule{R}\n\nType for step function schedules.\n\nConstructors\n\nStepSchedule(cst)\n\nReturn a schedule with a constant value cst.\n\nStepSchedule(;start, change_at, values)\n\nReturn a schedule that has initial value start. For all i, the schedule takes value values[i] at step change_at[i].\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#AlphaZero.PLSchedule","page":"Training Parameters","title":"AlphaZero.PLSchedule","text":"PLSchedule{R} <: AbstractSchedule{R}\n\nType for piecewise linear schedules.\n\nConstructors\n\nPLSchedule(cst)\n\nReturn a schedule with a constant value cst.\n\nPLSchedule(xs, ys)\n\nReturn a piecewise linear schedule such that:\n\nFor all i, (xs[i], ys[i]) belongs to the schedule's graph.\nBefore xs[1], the schedule has value ys[1].\nAfter xs[end], the schedule has value ys[end].\n\n\n\n\n\n","category":"type"},{"location":"reference/params/#AlphaZero.CyclicSchedule","page":"Training Parameters","title":"AlphaZero.CyclicSchedule","text":"CyclicSchedule(base, mid, term; n, xmid=0.45, xback=0.90)\n\nReturn the PLSchedule that is typically used for cyclic learning rate scheduling.\n\n\n\n\n\n","category":"function"},{"location":"reference/reports/#reports-1","page":"Training Reports","title":"Training Reports","text":"","category":"section"},{"location":"reference/reports/#","page":"Training Reports","title":"Training Reports","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/reports/#","page":"Training Reports","title":"Training Reports","text":"Report","category":"page"},{"location":"reference/reports/#AlphaZero.Report","page":"Training Reports","title":"AlphaZero.Report","text":"Analytical reports generated during training, for debugging and hyperparameters tuning.\n\n\n\n\n\n","category":"module"},{"location":"reference/reports/#","page":"Training Reports","title":"Training Reports","text":"Report.Initial\nReport.Iteration\nReport.Perfs","category":"page"},{"location":"reference/reports/#AlphaZero.Report.Initial","page":"Training Reports","title":"AlphaZero.Report.Initial","text":"Report.Initial\n\nReport summarizing the configuration of an agent before training starts.\n\nnum_network_parameters: see Network.num_parameters\nnum_network_regularized_parameters:   see Network.num_regularized_parameters\nmcts_footprint_per_node: see MCTS.memory_footprint_per_node\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#AlphaZero.Report.Iteration","page":"Training Reports","title":"AlphaZero.Report.Iteration","text":"Report.Iteration\n\nReport generated after each training iteration.\n\nFields self_play, memory, learning have types Report.SelfPlay,   Report.SelfPlay and Report.Learning respectively\nFields perfs_self_play, perfs_memory_analysis and perfs_learning are   performance reports for the different phases of the iteration,   with type Report.Perfs\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#AlphaZero.Report.Perfs","page":"Training Reports","title":"AlphaZero.Report.Perfs","text":"Report.Perfs\n\nPerformances report for a subroutine.\n\ntime: total time spent, in seconds\nallocated: amount of memory allocated, in bytes\ngc_time: total amount of time spent in the garbage collector\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#Self-Play-Phase-1","page":"Training Reports","title":"Self-Play Phase","text":"","category":"section"},{"location":"reference/reports/#","page":"Training Reports","title":"Training Reports","text":"Report.SelfPlay","category":"page"},{"location":"reference/reports/#AlphaZero.Report.SelfPlay","page":"Training Reports","title":"AlphaZero.Report.SelfPlay","text":"Report.SelfPlay\n\nReport generated after the self-play phase of an iteration.\n\ninference_time_ratio: see MCTS.inference_time_ratio\nsamples_gen_speed: average number of samples generated per second\naverage_exploration_depth: see MCTS.average_exploration_depth\nmcts_memory_footprint: estimation of the maximal memory footprint of the   MCTS tree during self-play, as computed by   MCTS.approximate_memory_footprint\nmemory_size: number of samples in the memory buffer at the end of the   self-play phase\nmemory_num_distinct_boards: number of distinct board positions in the   memory buffer at the end of the self-play phase\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#Memory-Analysis-Phase-1","page":"Training Reports","title":"Memory Analysis Phase","text":"","category":"section"},{"location":"reference/reports/#","page":"Training Reports","title":"Training Reports","text":"Report.Memory\nReport.Samples\nReport.StageSamples","category":"page"},{"location":"reference/reports/#AlphaZero.Report.Memory","page":"Training Reports","title":"AlphaZero.Report.Memory","text":"Report.Memory\n\nReport generated by the memory analysis phase of an iteration. It features statistics for\n\nthe whole memory buffer (all_samples::Report.Samples)\nthe samples collected during the last self-play iteration  (latest_batch::Report.Samples)\nthe subsets of the memory buffer corresponding to different game stages:  (per_game_stage::Vector{Report.StageSamples})\n\nSee MemAnalysisParams.\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#AlphaZero.Report.Samples","page":"Training Reports","title":"AlphaZero.Report.Samples","text":"Report.Samples\n\nStatistics about a set of samples, as collected during memory analysis.\n\nnum_samples: total number of samples\nnum_boards: number of distinct board positions\nWtot: total weight of the samples\nstatus: Report.LearningStatus statistics of the current network   on the samples\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#AlphaZero.Report.StageSamples","page":"Training Reports","title":"AlphaZero.Report.StageSamples","text":"Report.StageSamples\n\nStatistics for the samples corresponding to a particular game stage, as collected during memory analysis.\n\nThe samples whose statistics are collected in the samples_stats field correspond to historical positions where the number of remaining moves until the end of the game was in the range defined by the min_remaining_length and max_remaining_length fields.\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#Learning-Phase-1","page":"Training Reports","title":"Learning Phase","text":"","category":"section"},{"location":"reference/reports/#","page":"Training Reports","title":"Training Reports","text":"Report.Learning\nReport.Checkpoint\nReport.LearningStatus\nReport.Loss","category":"page"},{"location":"reference/reports/#AlphaZero.Report.Learning","page":"Training Reports","title":"AlphaZero.Report.Learning","text":"Report.Learning\n\nReport generated at the end of the learning phase of an iteration.\n\ntime_convert, time_loss, time_train and time_eval are the   amounts of time (in seconds) spent at converting the samples,   computing losses, performing gradient updates and evaluating checkpoints   respectively\ninitial_status: status before the learning phase, as an object of type   Report.LearningStatus\nlosses: loss value on each minibatch\ncheckpoints: vector of Report.Checkpoint reports\nnn_replaced: true if the best neural network was replaced\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#AlphaZero.Report.Checkpoint","page":"Training Reports","title":"AlphaZero.Report.Checkpoint","text":"Report.Checkpoint\n\nReport generated after a checkpoint evaluation.\n\nbatch_id: number of batches after which the checkpoint was computed\nstatus_after: learning status at the checkpoint, as an object of type  Report.LearningStatus\nreward: average reward collected by the contender network\nredundancy: ratio of duplicate positions encountered during the evaluation,  not counting the initial position. If this number is too high, you may  want to increase the move selection temperature.\nnn_replaced: true if the current best neural network was updated after  the checkpoint\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#AlphaZero.Report.LearningStatus","page":"Training Reports","title":"AlphaZero.Report.LearningStatus","text":"Report.LearningStatus\n\nStatistics about the performance of the neural network on a subset of the memory buffer.\n\nloss: detailed loss on the samples, as an object of type   Report.Loss\nHp: average entropy of the π component of samples (MCTS policy);   this quantity is independent of the network and therefore constant   during a learning iteration\nHpnet: average entropy of the network's prescribed policy on the samples\n\n\n\n\n\n","category":"type"},{"location":"reference/reports/#AlphaZero.Report.Loss","page":"Training Reports","title":"AlphaZero.Report.Loss","text":"Report.Loss\n\nDecomposition of the loss in a sum of terms (all have type Float32).\n\nL is the total loss: L == Lp + Lv + Lreg + Linv\nLp is the policy cross-entropy loss term\nLv is the average value mean square error\nLreg is the L2 regularization loss term\nLinv is the loss term penalizing the average weight put by the network on invalid actions\n\n\n\n\n\n","category":"type"},{"location":"reference/environment/#environment-1","page":"Environment","title":"Environment","text":"","category":"section"},{"location":"reference/environment/#","page":"Environment","title":"Environment","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/environment/#","page":"Environment","title":"Environment","text":"Env{Game, Network, Board}\nHandlers\nget_experience\ninitial_report\ntrain!(env::Env)","category":"page"},{"location":"reference/environment/#AlphaZero.Env","page":"Environment","title":"AlphaZero.Env","text":"Env{Game, Network, Board}\n\nType for an AlphZero environment.\n\nThe environment features the current neural network, the best neural network seen so far that is used for data generation, a memory buffer and an iteration counter.\n\nConstructor\n\nEnv{Game}(params, curnn, bestnn=copy(curnn), experience=[], itc=0)\n\nConstruct a new AlphaZero environment.\n\nGame is the type of the game being played\nparams has type Params\ncurnn is the current neural network and has type AbstractNetwork\nbestnn is the best neural network so far, which is used for data generation\nexperience is the initial content of the memory buffer  as a vector of TrainingSample\nitc is the value of the iteration counter (0 at the start of training)\n\n\n\n\n\n","category":"type"},{"location":"reference/environment/#AlphaZero.Handlers","page":"Environment","title":"AlphaZero.Handlers","text":"Handlers\n\nNamespace for the callback functions that are used during training. This enables logging, saving and plotting to be implemented separately. An example handler object is Session.\n\nAll callback functions take a handler object h as their first argument and sometimes a second argment r that consists in a report.\n\nCallback Comment\niteration_started(h) called at the beggining of an iteration\nself_play_started(h) called once per iter before self play starts\ngame_played(h) called after each game of self play\nself_play_finished(h, r) sends report: Report.SelfPlay\nmemory_analyzed(h, r) sends report: Report.Memory\nlearning_started(h, r) sends report: Report.LearningStatus\nupdates_started(h) called before each series of batch updates\nupdates_finished(h, r) sends report: Report.LearningStatus\ncheckpoint_started(h) called before a checkpoint evaluation starts\ncheckpoint_game_played(h) called after each arena game\ncheckpoint_finished(h, r) sends report: Report.Checkpoint\nlearning_finished(h, r) sends report: Report.Learning\niteration_finished(h, r) sends report: Report.Iteration\ntraining_finished(h) called once at the end of training\n\n\n\n\n\n","category":"module"},{"location":"reference/environment/#AlphaZero.get_experience","page":"Environment","title":"AlphaZero.get_experience","text":"get_experience(env::Env)\n\nReturn the content of the agent's memory as a vector of TrainingSample.\n\n\n\n\n\n","category":"function"},{"location":"reference/environment/#AlphaZero.initial_report","page":"Environment","title":"AlphaZero.initial_report","text":"initial_report(env::Env)\n\nReturn a report summarizing the configuration of agent before training starts, as an object of type Report.Initial.\n\n\n\n\n\n","category":"function"},{"location":"reference/environment/#AlphaZero.train!-Tuple{Env}","page":"Environment","title":"AlphaZero.train!","text":"train!(env::Env, handler=nothing)\n\nStart or resume the training of an AlphaZero agent.\n\nA handler object can be passed that implements a subset of the callback functions defined in Handlers.\n\n\n\n\n\n","category":"method"},{"location":"reference/mcts/#mcts-1","page":"MCTS","title":"MCTS","text":"","category":"section"},{"location":"reference/mcts/#","page":"MCTS","title":"MCTS","text":"CurrentModule = AlphaZero.MCTS","category":"page"},{"location":"reference/mcts/#","page":"MCTS","title":"MCTS","text":"MCTS","category":"page"},{"location":"reference/mcts/#AlphaZero.MCTS","page":"MCTS","title":"AlphaZero.MCTS","text":"A generic, standalone implementation of Monte Carlo Tree Search. It can be used on any game that implements GameInterface and with any external oracle.\n\nBoth a synchronous and an asynchronous version are implemented, which share most of their code. When browsing the sources for the first time, we recommend that you study the sychronous version first.\n\n\n\n\n\n","category":"module"},{"location":"reference/mcts/#Oracles-1","page":"MCTS","title":"Oracles","text":"","category":"section"},{"location":"reference/mcts/#","page":"MCTS","title":"MCTS","text":"Oracle\nevaluate\nevaluate_batch\nRolloutOracle","category":"page"},{"location":"reference/mcts/#AlphaZero.MCTS.Oracle","page":"MCTS","title":"AlphaZero.MCTS.Oracle","text":"MCTS.Oracle{Game}\n\nAbstract base type for an oracle. Oracles must implement MCTS.evaluate and MCTS.evaluate_batch.\n\n\n\n\n\n","category":"type"},{"location":"reference/mcts/#AlphaZero.MCTS.evaluate","page":"MCTS","title":"AlphaZero.MCTS.evaluate","text":"MCTS.evaluate(oracle::Oracle, board)\n\nEvaluate a single board position (assuming white is playing).\n\nReturn a pair (P, V) where:\n\nP is a probability vector on GI.available_actions(Game(board))\nV is a scalar estimating the value or win probability for white.\n\n\n\n\n\n","category":"function"},{"location":"reference/mcts/#AlphaZero.MCTS.evaluate_batch","page":"MCTS","title":"AlphaZero.MCTS.evaluate_batch","text":"MCTS.evaluate_batch(oracle::Oracle, boards)\n\nEvaluate a batch of board positions.\n\nExpect a vector of boards and return a vector of (P, V) pairs.\n\nA default implementation is provided that calls MCTS.evaluate sequentially on each position.\n\n\n\n\n\n","category":"function"},{"location":"reference/mcts/#AlphaZero.MCTS.RolloutOracle","page":"MCTS","title":"AlphaZero.MCTS.RolloutOracle","text":"MCTS.RolloutOracle{Game} <: MCTS.Oracle{Game}\n\nThis oracle estimates the value of a position by simulating a random game from it (a rollout). Moreover, it puts a uniform prior on available actions. Therefore, it can be used to implement the \"vanilla\" MCTS algorithm.\n\n\n\n\n\n","category":"type"},{"location":"reference/mcts/#Environment-1","page":"MCTS","title":"Environment","text":"","category":"section"},{"location":"reference/mcts/#","page":"MCTS","title":"MCTS","text":"Env\nexplore!\npolicy\nreset!","category":"page"},{"location":"reference/mcts/#AlphaZero.MCTS.Env","page":"MCTS","title":"AlphaZero.MCTS.Env","text":"MCTS.Env{Game}(oracle; <keyword args>) where Game\n\nCreate and initialize an MCTS environment with a given oracle.\n\nKeyword Arguments\n\nnworkers=1: numbers of asynchronous workers (see below)\nfill_batches=false: if true, a constant batch size is enforced for  evaluation requests, by completing batches with dummy entries if necessary\ncpuct=1.: exploration constant in the UCT formula\nnoise_ϵ=0., noise_α=1.: parameters for the dirichlet exploration noise  (see below)\n\nAsynchronous MCTS\n\nIf nworkers == 1, MCTS is run in a synchronous fashion and the oracle is invoked through MCTS.evaluate.\nIf nworkers > 1, nworkers asynchronous workers are spawned, along with an additional task to serve board evaluation requests. Such requests are processed by batches of size nworkers using MCTS.evaluate_batch.\n\nDirichlet Noise\n\nA naive way to ensure exploration during training is to adopt an ϵ-greedy policy, playing a random move at every turn instead of using the policy prescribed by MCTS.policy with probability ϵ. The problem with this naive strategy is that it may lead the player to make terrible moves at critical moments, thereby biasing the policy evaluation mechanism.\n\nA superior alternative is to add a random bias to the neural prior for the root node during MCTS exploration: instead of considering the policy p output by the neural network in the UCT formula, one uses (1-ϵ)p + ϵη where η is drawn once per call to MCTS.explore! from a Dirichlet distribution of parameter α.\n\n\n\n\n\n","category":"type"},{"location":"reference/mcts/#AlphaZero.MCTS.explore!","page":"MCTS","title":"AlphaZero.MCTS.explore!","text":"MCTS.explore!(env, state, nsims)\n\nRun nsims MCTS simulations from state.\n\n\n\n\n\n","category":"function"},{"location":"reference/mcts/#AlphaZero.MCTS.policy","page":"MCTS","title":"AlphaZero.MCTS.policy","text":"MCTS.policy(env, state; τ=1.)\n\nReturn the recommended stochastic policy on state, with temperature parameter equal to τ. If τ is zero, all the weight goes to the action with the highest visits count.\n\nA call to this function must always be preceded by a call to MCTS.explore!.\n\n\n\n\n\n","category":"function"},{"location":"reference/mcts/#AlphaZero.MCTS.reset!","page":"MCTS","title":"AlphaZero.MCTS.reset!","text":"MCTS.reset!(env)\n\nEmpty the MCTS tree.\n\n\n\n\n\n","category":"function"},{"location":"reference/mcts/#Profiling-Utilities-1","page":"MCTS","title":"Profiling Utilities","text":"","category":"section"},{"location":"reference/mcts/#","page":"MCTS","title":"MCTS","text":"inference_time_ratio\nmemory_footprint_per_node\napproximate_memory_footprint\naverage_exploration_depth","category":"page"},{"location":"reference/mcts/#AlphaZero.MCTS.inference_time_ratio","page":"MCTS","title":"AlphaZero.MCTS.inference_time_ratio","text":"MCTS.inference_time_ratio(env)\n\nReturn the ratio of time spent by MCTS.explore! on position evaluation (through functions MCTS.evaluate or MCTS.evaluate_batch) since the environment's creation.\n\n\n\n\n\n","category":"function"},{"location":"reference/mcts/#AlphaZero.MCTS.memory_footprint_per_node","page":"MCTS","title":"AlphaZero.MCTS.memory_footprint_per_node","text":"MCTS.memory_footprint_per_node(env)\n\nReturn an estimate of the memory footprint of a single node of the MCTS tree (in bytes).\n\n\n\n\n\n","category":"function"},{"location":"reference/mcts/#AlphaZero.MCTS.approximate_memory_footprint","page":"MCTS","title":"AlphaZero.MCTS.approximate_memory_footprint","text":"MCTS.approximate_memory_footprint(env)\n\nReturn an estimate of the memory footprint of the MCTS tree (in bytes).\n\n\n\n\n\n","category":"function"},{"location":"reference/mcts/#AlphaZero.MCTS.average_exploration_depth","page":"MCTS","title":"AlphaZero.MCTS.average_exploration_depth","text":"MCTS.average_exploration_depth(env)\n\nReturn the average number of nodes that are traversed during an MCTS simulation, not counting the root.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/package_overview/#Package-Overview-1","page":"Package Overview","title":"Package Overview","text":"","category":"section"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"The philosophy of this project is to provide an implementation of the AlphaZero algorithm that is simple enough to serve as a valuable pedagogical resource, while also being sufficiently flexible and fast to enable meaningful experiments on limited computing resources.","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"In this section, we describe some key features of AlphaZero.jl:","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"An asynchronous MCTS implementation\nA series of optional optimizations to increase training efficiency\nGeneric interfaces for games and neural networks\nA simple user interface to get started quickly and diagnose problems","category":"page"},{"location":"tutorial/package_overview/#async_mcts-1","page":"Package Overview","title":"Asynchronous MCTS","text":"","category":"section"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"A key MCTS optimization that is implemented in AlphaZero.jl is to allow several workers to explore the search tree asynchronously. Doing so requires a bit of care to ensure that all workers are not always exploring the same branch simultaneously, which is done by introducing a virtual loss mechanism.","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"Perhaps surprisingly, our implementation is fully sequential and workers are not scheduled on multiple cores. However, the real gain comes from enabling game positions to be evaluated by the neural network in large batches, thereby maximizing the GPU utilization.","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"To quantify this phenomenon, we plot below the resulting speedup on self-play data generation for our connect four agent as a function of the number of asynchronous workers. Using scripts/profile/async_mcts.jl on our machine, we obtain a 25x speedup for 128 workers:","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"(Image: Async speedup)","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"Note that the virtual loss induces an exploration bias that can become significant when the number of workers gets too close to the total number of MCTS simulations performed. For this reason, we only use 64 workers in our connect four experiment and settle for a 20x speedup.","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"We implemented MCTS (both synchronous and asynchronous) in a standalone module. Thanks to Julia's great support for coroutines, adding support for asynchronicity from a vanilla implementation turned out to only be a matter of doing some minor refactoring and adding a few dozens lines of additional code.","category":"page"},{"location":"tutorial/package_overview/#Optional-Optimizations-1","page":"Package Overview","title":"Optional Optimizations","text":"","category":"section"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"AlphaZero.jl has out-of-the-box support for many of the optimizations introduced in Oracle's series and also implements new ones.  These include:","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"Position averaging\nMemory buffer with growing window\nCyclical learning rates\nSymmetry-based data augmentation and game randomization","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"All these optimizations are referenced in the Training Parameters section of the manual.","category":"page"},{"location":"tutorial/package_overview/#Game-Interface-1","page":"Package Overview","title":"Game Interface","text":"","category":"section"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"You can use AlphaZero.jl on the game of your choice by simply implementing the Game Interface. Currently, there is only support for two-players, symmetric[1], zero-sum games with finite action spaces and perfect information. Ultimately, the plan is to lift some of these restrictions though.","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"[1]: We call a game symmetric when the rules are the same for both players. Said differently, it is always possible to swap the players' colors along with the color of every piece on the board without affecting the game.","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"The best way to learn about the game interface, in addition to reading the documentation is to look at existing examples such as games/connect-four/game.jl.","category":"page"},{"location":"tutorial/package_overview/#Network-Interface-1","page":"Package Overview","title":"Network Interface","text":"","category":"section"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"AlphaZero.jl is agnostic to the choice of deep learning framework and allows you to plug any neural network that implements the Network Interface. For convenience, we provide a library of standard networks based on Knet. Right now, it features templates for two-headed multi-layer perceptrons and convolutional resnets.","category":"page"},{"location":"tutorial/package_overview/#User-Interface-and-Utilities-1","page":"Package Overview","title":"User Interface and Utilities","text":"","category":"section"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"AlphaZero.jl comes with batteries included. It comes with a simple  user interface that provides utilities for logging, profiling, benchmarking and model exploration.","category":"page"},{"location":"tutorial/package_overview/#","page":"Package Overview","title":"Package Overview","text":"<div>\n<img src=\"../assets/img/connect-four/plots/benchmark_won_games.png\" width=\"24%\" />\n<img src=\"../assets/img/connect-four/plots/arena.png\" width=\"24%\" />\n<img src=\"../assets/img/connect-four/plots/exploration_depth.png\" width=\"24%\" />\n<img src=\"../assets/img/connect-four/plots/entropies.png\" width=\"24%\" />\n<img src=\"../assets/img/connect-four/plots/loss.png\" width=\"24%\" />\n<img src=\"../assets/img/connect-four/plots/loss_per_stage.png\" width=\"24%\"/>\n<img src=\"../assets/img/connect-four/plots/iter_perfs/1.png\" width=\"24%\"/>\n<img src=\"../assets/img/connect-four/plots/iter_loss/1.png\" width=\"24%\" />\n<!--<img src=\"../assets/img/connect-four/plots/iter_summary/1.png\" width=\"24%\" />-->\n</div>","category":"page"},{"location":"reference/game_interface/#game_interface-1","page":"Game Interface","title":"Game Interface","text":"","category":"section"},{"location":"reference/game_interface/#","page":"Game Interface","title":"Game Interface","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/game_interface/#","page":"Game Interface","title":"Game Interface","text":"GameInterface","category":"page"},{"location":"reference/game_interface/#AlphaZero.GameInterface","page":"Game Interface","title":"AlphaZero.GameInterface","text":"A generic interface for two-players, symmetric, zero-sum games.\n\nWe call a game symmetric when the rules are the same for both players. Said differently, it is always possible to swap the players' colors along with the color of every piece on the board without affecting the game.\n\n\n\n\n\n","category":"module"},{"location":"reference/game_interface/#","page":"Game Interface","title":"Game Interface","text":"CurrentModule = AlphaZero.GameInterface","category":"page"},{"location":"reference/game_interface/#Mandatory-Interface-1","page":"Game Interface","title":"Mandatory Interface","text":"","category":"section"},{"location":"reference/game_interface/#Types-1","page":"Game Interface","title":"Types","text":"","category":"section"},{"location":"reference/game_interface/#","page":"Game Interface","title":"Game Interface","text":"AbstractGame\nBoard\nAction","category":"page"},{"location":"reference/game_interface/#AlphaZero.GameInterface.AbstractGame","page":"Game Interface","title":"AlphaZero.GameInterface.AbstractGame","text":"AbstractGame\n\nAbstract base type for a game state.\n\nConstructors\n\nAny subtype Game must implement Base.copy along with the following constructors:\n\nGame()\n\nReturn the initial state of the game.\n\nGame(board, white_playing=true)\n\nReturn the unique state specified by a board and a current player. By convention, the first player to play is called white and the other is called black.\n\n\n\n\n\n","category":"type"},{"location":"reference/game_interface/#AlphaZero.GameInterface.Board","page":"Game Interface","title":"AlphaZero.GameInterface.Board","text":"Board(Game::Type{<:AbstractGame})\n\nReturn the board type corresponding to Game.\n\nBoard objects must be persistent or appear as such as they are stored into the MCTS tree without copying.\n\nRemark\n\nA game state (of type AbstractGame) is characterized by two pieces of information: the board state and the identity of the player to play next. There are two reasons for having a separate Board type:\n\nThis separation allows the Game object to store redundant state information, typically for caching expensive computations.\nThis separation enables leveraging the symmetry between players by storing every board in the MCTS tree from the perspective of the current player (as if white were to play next).\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.Action","page":"Game Interface","title":"AlphaZero.GameInterface.Action","text":"Action(Game::Type{<:AbstractGame})\n\nReturn the action type corresponding to Game.\n\nActions must be colorblind in the following sense:\n\navailable_actions(s) == available_actions(state_symmetric(s))\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#Game-Functions-1","page":"Game Interface","title":"Game Functions","text":"","category":"section"},{"location":"reference/game_interface/#","page":"Game Interface","title":"Game Interface","text":"white_playing\nwhite_reward\nboard\nboard_symmetric\nactions\nactions_mask\nplay!\nheuristic_value\nvectorize_board\nsymmetries","category":"page"},{"location":"reference/game_interface/#AlphaZero.GameInterface.white_playing","page":"Game Interface","title":"AlphaZero.GameInterface.white_playing","text":"white_playing(state::AbstractGame) :: Bool\n\nReturn true if white is to play and false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.white_reward","page":"Game Interface","title":"AlphaZero.GameInterface.white_reward","text":"white_reward(state::AbstractGame)\n\nReturn nothing if the game hasn't ended. Otherwise, return a reward for the white player as a number between -1 and 1.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.board","page":"Game Interface","title":"AlphaZero.GameInterface.board","text":"board(state::AbstractGame)\n\nReturn the game board.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.board_symmetric","page":"Game Interface","title":"AlphaZero.GameInterface.board_symmetric","text":"board_symmetric(state::AbstractGame)\n\nReturn the symmetric of the game board, where the players' colors are swapped.\n\nThe white player must have opposite values in state and state_symmetric(state).\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.actions","page":"Game Interface","title":"AlphaZero.GameInterface.actions","text":"actions(::Type{<:AbstractGame})\n\nReturn the vector of all game actions.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.actions_mask","page":"Game Interface","title":"AlphaZero.GameInterface.actions_mask","text":"actions_mask(state::AbstractGame)\n\nReturn a boolean mask indicating what actions are available from state.\n\nThe following identities must hold:\n\ngame_terminated(state) || any(actions_mask(state))\nlength(actions_mask(state)) == length(actions(typeof(state)))\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.play!","page":"Game Interface","title":"AlphaZero.GameInterface.play!","text":"play!(state::AbstractGame, action)\n\nUpdate the game state by making the current player perform action.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.heuristic_value","page":"Game Interface","title":"AlphaZero.GameInterface.heuristic_value","text":"heuristic_value(state::AbstractGame)\n\nReturn a heuristic estimate of the state value for the current player.\n\nThe given state must be nonfinal and returned values must belong to the (- ) interval. Also, the following must hold:\n\nheuristic_value(s) == heuristic_value(state_symmetric(s))\n\nThis function is not needed by AlphaZero but it is useful for building baselines such as minmax players.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.vectorize_board","page":"Game Interface","title":"AlphaZero.GameInterface.vectorize_board","text":"vectorize_board(::Type{<:AbstractGame}, board) :: Array{Float32}\n\nReturn a vectorized representation of a board.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.symmetries","page":"Game Interface","title":"AlphaZero.GameInterface.symmetries","text":"symmetries(::Type{G}, board) where {G <: AbstractGame}\n\nReturn the vector of all pairs (b, σ) where:\n\nb is the image of board by a nonidentical symmetry\nσ is the associated actions permutation, as an integer vector of  size num_actions(Game).\n\nA default implementation is provided that returns an empty vector.\n\nNote\n\nThis function should not be confused with board_symmetric.\n\nboard_symmetric only deals with color symmetry (the rules of the  game are the same for both players). Its implementation is mandatory and  leveraged by MCTS.\nsymmetries can be used to declare additional symmetries,  typically about board geometry (ie. a tictactoe grid is invariant  by rotation).\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#Interface-for-Interactive-Tools-1","page":"Game Interface","title":"Interface for Interactive Tools","text":"","category":"section"},{"location":"reference/game_interface/#","page":"Game Interface","title":"Game Interface","text":"action_string\nparse_action\nread_state\nprint_state","category":"page"},{"location":"reference/game_interface/#AlphaZero.GameInterface.action_string","page":"Game Interface","title":"AlphaZero.GameInterface.action_string","text":"action_string(::Type{<:AbstractGame}, action) :: String\n\nReturn a human-readable string representing the provided action.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.parse_action","page":"Game Interface","title":"AlphaZero.GameInterface.parse_action","text":"parse_action(::Type{<:AbstractGame}, str::String)\n\nReturn the action described by string str or nothing if str does not denote a valid action.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.read_state","page":"Game Interface","title":"AlphaZero.GameInterface.read_state","text":"read_state(::Type{G}) where G <: AbstractGame :: Union{G, Nothing}\n\nRead a state description from the standard input. Return the corresponding state or nothing in case of an invalid input.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.print_state","page":"Game Interface","title":"AlphaZero.GameInterface.print_state","text":"print_state(state::AbstractGame)\n\nPrint a state on the standard output.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#Derived-Functions-1","page":"Game Interface","title":"Derived Functions","text":"","category":"section"},{"location":"reference/game_interface/#","page":"Game Interface","title":"Game Interface","text":"state_symmetric\ngame_terminated\nnum_actions\navailable_actions\nboard_dim\nrandom_symmetric_state","category":"page"},{"location":"reference/game_interface/#AlphaZero.GameInterface.state_symmetric","page":"Game Interface","title":"AlphaZero.GameInterface.state_symmetric","text":"state_symmetric(state)\n\nReturn a fresh symmetric state where the players' colors are swapped. See board_symmetric.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.game_terminated","page":"Game Interface","title":"AlphaZero.GameInterface.game_terminated","text":"game_terminated(::AbstractGame)\n\nReturn a boolean indicating whether or not a game is in a terminal state.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.num_actions","page":"Game Interface","title":"AlphaZero.GameInterface.num_actions","text":"num_actions(::Type{G})\n\nReturn the total number of actions associated with a game.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.available_actions","page":"Game Interface","title":"AlphaZero.GameInterface.available_actions","text":"available_actions(state::AbstractGame)\n\nReturn the vector of all available actions in a given state.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.board_dim","page":"Game Interface","title":"AlphaZero.GameInterface.board_dim","text":"board_dim(::Type{G})\n\nReturn a tuple that indicates the shape of a vectorized board representation.\n\n\n\n\n\n","category":"function"},{"location":"reference/game_interface/#AlphaZero.GameInterface.random_symmetric_state","page":"Game Interface","title":"AlphaZero.GameInterface.random_symmetric_state","text":"random_symmetric_state(::AbstractGame)\n\nReturn a fresh new state that is the image of the given state by a random symmetry (see symmetries).\n\n\n\n\n\n","category":"function"},{"location":"reference/player/#player-1","page":"Players","title":"Players","text":"","category":"section"},{"location":"reference/player/#","page":"Players","title":"Players","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/player/#Player-Interface-1","page":"Players","title":"Player Interface","text":"","category":"section"},{"location":"reference/player/#","page":"Players","title":"Players","text":"AbstractPlayer\nthink\nselect_move\nreset_player!","category":"page"},{"location":"reference/player/#AlphaZero.AbstractPlayer","page":"Players","title":"AlphaZero.AbstractPlayer","text":"AbstractPlayer{Game}\n\nAbstract type for a player of Game.\n\n\n\n\n\n","category":"type"},{"location":"reference/player/#AlphaZero.think","page":"Players","title":"AlphaZero.think","text":"think(::AbstractPlayer, state, turn=nothing)\n\nReturn a probability distribution over actions as a (actions, π) pair.\n\nThe turn argument, if provided, indicates the number of actions that have been played before by both players in the current game. It is useful as during self-play, AlphaZero typically drops its temperature parameter after a fixed number of turns.\n\n\n\n\n\n","category":"function"},{"location":"reference/player/#AlphaZero.select_move","page":"Players","title":"AlphaZero.select_move","text":"select_move(player::AbstractPlayer, state, turn=nothing)\n\nReturn a single action. A default implementation is provided that samples an action according to the distribution computed by think.\n\n\n\n\n\n","category":"function"},{"location":"reference/player/#AlphaZero.reset_player!","page":"Players","title":"AlphaZero.reset_player!","text":"reset_player!(::AbstractPlayer)\n\nReset the internal memory of a player (e.g. the MCTS tree). The default implementation does nothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/player/#Player-Instances-1","page":"Players","title":"Player Instances","text":"","category":"section"},{"location":"reference/player/#","page":"Players","title":"Players","text":"MctsPlayer\nRandomPlayer\nNetworkPlayer\nEpsilonGreedyPlayer","category":"page"},{"location":"reference/player/#AlphaZero.MctsPlayer","page":"Players","title":"AlphaZero.MctsPlayer","text":"MctsPlayer{Game, MctsEnv} <: AbstractPlayer{Game}\n\nA player that selects actions using MCTS.\n\nConstructors\n\nMctsPlayer(mcts::MCTS.Env; τ, niters, timeout=nothing)\n\nConstruct a player from an MCTS environment. When computing each move:\n\nif timeout is provided, MCTS simulations are executed for timeout seconds by groups of niters\notherwise, niters MCTS simulations are run\n\nThe temperature parameter τ can be either a real number or a StepSchedule.\n\nMctsPlayer(oracle::MCTS.Oracle, params::MctsParams; timeout=nothing)\n\nConstruct an MCTS player from an oracle and an MctsParams structure. If the oracle is a network, this constructor handles copying it, putting it in test mode and copying it on the GPU (if necessary).\n\n\n\n\n\n","category":"type"},{"location":"reference/player/#AlphaZero.RandomPlayer","page":"Players","title":"AlphaZero.RandomPlayer","text":"RandomPlayer{Game} <: AbstractPlayer{Game}\n\nA player that picks actions uniformly at random.\n\n\n\n\n\n","category":"type"},{"location":"reference/player/#AlphaZero.NetworkPlayer","page":"Players","title":"AlphaZero.NetworkPlayer","text":"NetworkPlayer{Game, Net} <: AbstractPlayer{Game}\n\nA player that uses the policy output by a neural network directly, instead of relying on MCTS.\n\n\n\n\n\n","category":"type"},{"location":"reference/player/#AlphaZero.EpsilonGreedyPlayer","page":"Players","title":"AlphaZero.EpsilonGreedyPlayer","text":"EpsilonGreedyPlayer{Game, Player} <: AbstractPlayer{Game}\n\nA wrapper on a player that makes it choose a random move with a fixed ϵ probability.\n\n\n\n\n\n","category":"type"},{"location":"reference/player/#Derived-Functions-1","page":"Players","title":"Derived Functions","text":"","category":"section"},{"location":"reference/player/#","page":"Players","title":"Players","text":"play_game\npit\nColorPolicy\ninteractive!\nHuman","category":"page"},{"location":"reference/player/#AlphaZero.play_game","page":"Players","title":"AlphaZero.play_game","text":"play_game(white, black, memory=nothing)\n\nPlay a game between two AbstractPlayer and return the reward obtained by white.\n\nIf the memory argument is provided, samples are automatically collected from this game in the given MemoryBuffer.\nIf the flip_probability argument is set to p, the board is flipped randomly at every turn with probability p, using GI.random_symmetric_state.\n\n\n\n\n\n","category":"function"},{"location":"reference/player/#AlphaZero.pit","page":"Players","title":"AlphaZero.pit","text":"pit(handler, contender, baseline, ngames)\n\nEvaluate two AbstractPlayer against each other in a series of games.\n\nArguments\n\nhandler: this function is called after each simulated  game with two arguments: the game number i and the collected reward z  for the contender player\nngames: number of games to play\n\nOptional keyword arguments\n\nreset_every: if set, players are reset every reset_every games\ncolor_policy: determines the ColorPolicy,  which is ALTERNATE_COLORS by default\nmemory=nothing: memory to use to record samples\nflip_probability=0.: see play_game\n\n\n\n\n\n","category":"function"},{"location":"reference/player/#AlphaZero.ColorPolicy","page":"Players","title":"AlphaZero.ColorPolicy","text":"@enum ColorPolicy ALTERNATE_COLORS BASELINE_WHITE CONTENDER_WHITE\n\nPolicy for attributing colors in a duel between a baseline and a contender.\n\n\n\n\n\n","category":"type"},{"location":"reference/player/#AlphaZero.interactive!","page":"Players","title":"AlphaZero.interactive!","text":"interactive!(game, white, black)\n\nLaunch an interactive session for game::AbstractGame between players white and black. Both players have type AbstractPlayer and one of them is typically Human.\n\n\n\n\n\n","category":"function"},{"location":"reference/player/#AlphaZero.Human","page":"Players","title":"AlphaZero.Human","text":"Human{Game} <: AbstractPlayer{Game}\n\nHuman player that queries the standard input for actions.\n\nDoes not implement think but instead implements select_move directly.\n\n\n\n\n\n","category":"type"},{"location":"reference/memory/#memory-1","page":"Memory Buffer","title":"Memory Buffer","text":"","category":"section"},{"location":"reference/memory/#","page":"Memory Buffer","title":"Memory Buffer","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/memory/#","page":"Memory Buffer","title":"Memory Buffer","text":"TrainingSample\nMemoryBuffer","category":"page"},{"location":"reference/memory/#AlphaZero.TrainingSample","page":"Memory Buffer","title":"AlphaZero.TrainingSample","text":"TrainingSample{Board}\n\nType of a training sample. A sample features the following fields:\n\nb::Board is the board position (by convention, white is to play)\nπ::Vector{Float64} is the recorded MCTS policy for this position\nz::Float64 is the reward collected at the end of the game\nt::Float64 is the number of moves remaining before the end of the game\nn::Int is the number of times the board position b was recorded\n\nAs revealed by the last field n, several samples that correspond to the same board position can be merged, in which case the π, z and t fields are averaged together.\n\n\n\n\n\n","category":"type"},{"location":"reference/memory/#AlphaZero.MemoryBuffer","page":"Memory Buffer","title":"AlphaZero.MemoryBuffer","text":"MemoryBuffer{Board}\n\nA circular buffer to hold memory samples.\n\nHow to use\n\nUse new_batch!(mem) to start a new batch, typically once per iteration before self-play.\nUse push_sample!(mem, board, policy, white_playing, turn) to record a sample during a game, where turn is the number of actions that have been played by both players since the start of the game.\nUse push_game!(mem, white_reward, game_length) when a game terminates for which samples have been collected.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/alphazero_intro/#alphazero_intro-1","page":"Introduction to AlphaZero","title":"Introduction to AlphaZero","text":"","category":"section"},{"location":"tutorial/alphazero_intro/#","page":"Introduction to AlphaZero","title":"Introduction to AlphaZero","text":"AlphaZero elegantly combines search and learning, which are described in Rich Sutton's essay   \"The Bitter Lesson\" as the two fundamental pillars of AI. It augments a tree search procedure with two learnt heuristics: one to evaluate board positions and one to concentrate branching on moves that are not obviously wrong.","category":"page"},{"location":"tutorial/alphazero_intro/#","page":"Introduction to AlphaZero","title":"Introduction to AlphaZero","text":"When training starts, both heuristics are initialized randomly and tree search has only access to a meaningful signal at the level of final states, where the game outcome is known. These heuristics are then improved iteratively through self-play. More specifically:","category":"page"},{"location":"tutorial/alphazero_intro/#","page":"Introduction to AlphaZero","title":"Introduction to AlphaZero","text":"The heuristics are implemented by a two-headed neural network. Given a board position as an input, it estimates the probability for each player to ultimately win the game. It also provides a quantitative estimate of the relative quality of all available moves in the form of a probability distribution.\nThe search component is powered by Monte-Carlo Tree Search (MCTS), which implements a good compromise between breadth-first and depth-first search and provides a principled way to manage the uncertainty introduced by the heuristics. Also, given a position, it does not return a single choice for a best move but rather a probability distribution over available moves.\nAt each training iteration, AlphaZero plays a series of games against itself. The network is then updated so that it makes more accurate predictions about the outcome of these games. Also, the network's policy heuristic is updated to match the output of MCTS on all encountered positions. This way, MCTS can be seen as a powerful policy improvement operator.","category":"page"},{"location":"tutorial/alphazero_intro/#","page":"Introduction to AlphaZero","title":"Introduction to AlphaZero","text":"For more details, we recommend the following resources.","category":"page"},{"location":"tutorial/alphazero_intro/#External-resources-1","page":"Introduction to AlphaZero","title":"External resources","text":"","category":"section"},{"location":"tutorial/alphazero_intro/#","page":"Introduction to AlphaZero","title":"Introduction to AlphaZero","text":"A short and effective introduction to AlphaZero is Surag Nair's  excellent tutorial.\nA good resource to learn about Monte Carlo Tree Search (MCTS) is this  Int8 tutorial.\nThen, DeepMind's original  Nature paper  is a nice read.\nFinally, this series of posts  from Oracle has been an important source of inspiration for AlphaZero.jl.  It provides useful details on implementing asynchronous MCTS, along with  an interesting discussion on hyperparameters tuning.","category":"page"},{"location":"reference/ui/#ui-1","page":"User Interface","title":"User Interface","text":"","category":"section"},{"location":"reference/ui/#","page":"User Interface","title":"User Interface","text":"CurrentModule = AlphaZero","category":"page"},{"location":"reference/ui/#","page":"User Interface","title":"User Interface","text":"UserInterface","category":"page"},{"location":"reference/ui/#AlphaZero.UserInterface","page":"User Interface","title":"AlphaZero.UserInterface","text":"The default user interface for AlphaZero.\n\nThe user interface is fully separated from the core algorithm and can therefore be replaced easily.\n\n\n\n\n\n","category":"module"},{"location":"reference/ui/#","page":"User Interface","title":"User Interface","text":"CurrentModule = AlphaZero.UserInterface","category":"page"},{"location":"reference/ui/#session-1","page":"User Interface","title":"Session","text":"","category":"section"},{"location":"reference/ui/#","page":"User Interface","title":"User Interface","text":"Session","category":"page"},{"location":"reference/ui/#AlphaZero.UserInterface.Session","page":"User Interface","title":"AlphaZero.UserInterface.Session","text":"Session{Env}\n\nA wrapper on an AlphaZero environment that adds features such as:\n\nLogging and plotting\nLoading and saving of environments\n\nIn particular, it implements the Handlers interface.\n\nPublic fields\n\nenv::Env is the environment wrapped by the session\nreport is the current session report, with type SessionReport\n\n\n\n\n\n","category":"type"},{"location":"reference/ui/#","page":"User Interface","title":"User Interface","text":"(Image: Session CLI (first iteration))","category":"page"},{"location":"reference/ui/#","page":"User Interface","title":"User Interface","text":"Session(::Env) # Strangely, this includes all constructors...\nresume!\nsave\nplay_interactive_game\nstart_explorer(::Session)\nSessionReport","category":"page"},{"location":"reference/ui/#AlphaZero.UserInterface.Session-Tuple{Env}","page":"User Interface","title":"AlphaZero.UserInterface.Session","text":"Session(::Type{Game}, ::Type{Net}, params, netparams) where {Game, Net}\n\nCreate a new session using the given parameters, or load it from disk if it already exists.\n\nArguments\n\nGame is the type ot the game that is being learnt\nNet is the type of the network that is being used\nparams has type Params\nnetparams has type Network.HyperParams(Net)\n\nOptional keyword arguments\n\ndir: session directory in which all files and reports are saved; this   argument is either a string or nothing (default), in which case the   session won't be saved automatically and no file will be generated\nautosave=true: if set to false, the session won't be saved automatically nor   any file will be generated\nnostdout=false: disables logging on the standard output when set to true\nbenchmark=[]: vector of Benchmark.Duel to be used as a benchmark\nload_saved_params=false: if set to true, load the training parameters from   the session directory (if present) rather than using the params   argument\nsave_intermediate=false: if set to true (along with autosave), all   intermediate training environments are saved on disk so that   the whole training process can be analyzed later. This can   consume a lot of disk space.\n\n\n\n\n\nSession(::Type{Game}, ::Type{Network}, dir::String) where {Game, Net}\n\nLoad an existing session from a directory.\n\nThis constructor accepts the optional keyword arguments autosave, nostdout, benchmark and save_intermediate.\n\n\n\n\n\nSession(env::Env[, dir])\n\nCreate a session from an initial environment.\n\nThe iteration counter of the environment must be equal to 0\nIf a session directory is provided, this directory must not exist yet\n\nThis constructor features the optional keyword arguments autosave, nostdout, benchmark and save_intermediate.\n\n\n\n\n\n","category":"method"},{"location":"reference/ui/#AlphaZero.UserInterface.resume!","page":"User Interface","title":"AlphaZero.UserInterface.resume!","text":"resume!(session::Session)\n\nResume a previously created or loaded session. The user can interrupt training by sending a SIGKILL signal.\n\n\n\n\n\n","category":"function"},{"location":"reference/ui/#AlphaZero.UserInterface.save","page":"User Interface","title":"AlphaZero.UserInterface.save","text":"save(session::Session)\n\nSave a session on disk.\n\nThis function is called automatically by resume! after each training iteration if the session was created with autosave=true.\n\n\n\n\n\n","category":"function"},{"location":"reference/ui/#AlphaZero.UserInterface.play_interactive_game","page":"User Interface","title":"AlphaZero.UserInterface.play_interactive_game","text":"play_interactive_game(session::Session; timeout=2.)\n\nStart an interactive game against AlphaZero, allowing it timeout seconds of thinking time for each move.\n\n\n\n\n\n","category":"function"},{"location":"reference/ui/#AlphaZero.UserInterface.start_explorer-Tuple{Session}","page":"User Interface","title":"AlphaZero.UserInterface.start_explorer","text":"start_explorer(session::Session)\n\nStart an explorer session for the current environment. See Explorer.\n\n\n\n\n\n","category":"method"},{"location":"reference/ui/#AlphaZero.UserInterface.SessionReport","page":"User Interface","title":"AlphaZero.UserInterface.SessionReport","text":"SessionReport\n\nThe full collection of statistics and benchmark results collected during a training session.\n\nFields\n\niterations: vector of n iteration reports with type   Report.Iteration\nbenchmark: vector of n+1 benchmark reports with type   Benchmark.Report\n\n\n\n\n\n","category":"type"},{"location":"reference/ui/#explorer-1","page":"User Interface","title":"Explorer","text":"","category":"section"},{"location":"reference/ui/#","page":"User Interface","title":"User Interface","text":"Explorer","category":"page"},{"location":"reference/ui/#AlphaZero.UserInterface.Explorer","page":"User Interface","title":"AlphaZero.UserInterface.Explorer","text":"Explorer{Game}\n\nA command interpreter to explore the internals of a player through interactive play.\n\nConstructors\n\nExplorer(player::AbstractPlayer, state=nothing; memory=nothing)\n\nBuild an explorer to investigate the behavior of player from a given state (by default, the initial state). Optionally, a reference to a memory buffer can be provided, in which case additional state statistics will be displayed.\n\nExplorer(env::Env, state=nothing; arena_mode=false)\n\nBuild an explorer for the MCTS player based on neural network env.bestnn and on parameters env.params.self_play.mcts or env.params.arena.mcts (depending on the value of arena_mode).\n\nCommands\n\nThe following commands are currently implemented:\n\ndo [action]: make the current player perform action. By default, the action of highest score is played.\nexplore [num_sims]: run num_sims MCTS simulations from the current state (for MCTS players only).\ngo: query the user for a state description and go to this state.\nflip: flip the board according to a random symmetry.\nundo: undo the effect of the previous command.\nrestart: restart the explorer.\n\n\n\n\n\n","category":"type"},{"location":"reference/ui/#","page":"User Interface","title":"User Interface","text":"(Image: Explorer)","category":"page"},{"location":"reference/ui/#","page":"User Interface","title":"User Interface","text":"start_explorer(::Explorer)","category":"page"},{"location":"reference/ui/#AlphaZero.UserInterface.start_explorer-Tuple{Explorer}","page":"User Interface","title":"AlphaZero.UserInterface.start_explorer","text":"start_explorer(exp::Explorer)\n\nStart an interactive explorer session.\n\n\n\n\n\n","category":"method"},{"location":"contributing/guide/#contributions_guide-1","page":"Contribution Guide","title":"Contribution Guide","text":"","category":"section"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"Contributions to AlphaZero.jl are most welcome. Here are some contribution ideas:","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"Add support for a new game\nHelp with hyperparameter tuning\nImprove the user interface\nDevelop support for a more general game interface\nWrite tutorials or other learning resources based on this package\nDesign a logo","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"Also, there are many small improvements and variations that can be built on top of this implementation and that would make for nice ML projects. Here are a few examples:","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"Add a resignation mechanism to speed-up self-play\nGive more weight to recent samples during learning\nUse rollouts in addition to the network's value head to evaluate positions (as is done by AlphaGo Lee)\nUse supervised learning to initialize the network based on a set of games played by humans\nImplement the alternate training target proposed here","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"Please do not hesitate to open a Github issue to share any idea, feedback or suggestion.","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"","category":"page"},{"location":"contributing/guide/#Add-support-for-a-new-game-1","page":"Contribution Guide","title":"Add support for a new game","text":"","category":"section"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"The simplest way to contribute to AlphaZero.jl is to demonstrate it on new games. Interesting candidates include: Othello, Gobblet, Go 9x9, Chess...","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"Guidelines for adding support for new games are available here.","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"","category":"page"},{"location":"contributing/guide/#Help-with-hyperparameter-tuning-1","page":"Contribution Guide","title":"Help with hyperparameter tuning","text":"","category":"section"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"A good place to start would be to experiment with the parameters of the Connect Four agent discussed in the tutorial, as it went through little tuning and can probably be improved significantly. Any kind of hyperparameters study would be extremely valuable in getting a better understanding of AlphaZero's training process.","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"More generally, as a training session can take hours or days, it is hard for a single person to fine-tune AlphaZero's many hyperparameters. In an effort to tackle more and more ambitious games, it would be useful to come up with a collaborative process for running tuning experiments and share the resulting insights.","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"","category":"page"},{"location":"contributing/guide/#Improve-the-user-interface-1","page":"Contribution Guide","title":"Improve the user interface","text":"","category":"section"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"An effort has been made in designing AlphaZero.jl to separate the user interface code from the core logic (see AlphaZero.Handlers). We would be interested in seeing alternative user interfaces being developed. In particular, using something like TensorBoard for logging and/or profiling might be nice.","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"","category":"page"},{"location":"contributing/guide/#contrib_generalize-1","page":"Contribution Guide","title":"Develop support for a more general game interface","text":"","category":"section"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"A first step may be to add support for nonsymmetric games and games with more than two players. A more ambitious goal would be to add support for games with imperfect information. Note that how to best adapt the AlphaZero approach to those games is pretty much an open question though.","category":"page"},{"location":"contributing/guide/#","page":"Contribution Guide","title":"Contribution Guide","text":"On the engineering side, it may be nice to replace the current game interface by something more standard such as OpenSpiel, for which a Julia wrapper is currently being developed. Doing so would give AlphaZero.jl access to many interesting game environments for free.","category":"page"},{"location":"#AlphaZero.jl-1","page":"Home","title":"AlphaZero.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package provides a generic, simple and fast implementation of Deepmind's AlphaZero algorithm:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The core algorithm is only 2,000 lines of pure, hackable Julia code.\nGeneric interfaces make it easy to add support for new games or new learning frameworks.\nBeing between one and two orders of magnitude faster than its Python alternatives, this implementation enables solving nontrivial games on a standard desktop computer with a GPU.","category":"page"},{"location":"#Why-should-I-care-about-AlphaZero?-1","page":"Home","title":"Why should I care about AlphaZero?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Beyond its much publicized success in attaining superhuman level at games such as Chess and Go, DeepMind's AlphaZero algorithm illustrates a more general methodology of combining learning and search to explore large combinatorial spaces effectively. We believe that this methodology can have exciting applications in many different research areas.","category":"page"},{"location":"#What-does-make-this-implementation-fast-and-why-does-it-matter?-1","page":"Home","title":"What does make this implementation fast and why does it matter?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Because AlphaZero is resource-hungry, successful open-source implementations (such as Leela Zero) are written in low-level languages (such as C++) and optimized for highly distributed computing environments. This makes them hardly accessible for students, researchers and hackers.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Many simple Python implementations can be found on Github, but none of them is able to beat a reasonable baseline on games such as Othello or Connect Four. As an illustration, the benchmark in the README of the most popular of them only features a random baseline, along with a greedy baseline that does not appear to be significantly stronger.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"AlphaZero.jl is designed to be as simple as those Python implementations. In addition, it is between one and two orders of magnitude faster, making it possible to solve nontrivial games on a standard desktop computer with a GPU. This gain comes mostly from two sources:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Julia's inherent speed: most machine learning algorithms do not suffer much from being written in Python as most of the computation happens within heavily optimized matrix manipulation routines. This is not the case with AlphaZero, where tree search is also a possible bottleneck.\nAn asynchronous MCTS implementation: even more importantly, a key aspect in making MCTS scale is to enable several workers to explore the search tree asynchronously. This is a huge win even on a single machine, as it enables to perform neural-network inference on large batches rather than evaluating board positions separately, thereby maximizing the GPU utilization (see benchmark).","category":"page"},{"location":"#Acknowledgements-1","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This material is based upon work supported by the United States Air Force and DARPA under Contract No. FA8750-18-C-0092. Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the United States Air Force and DARPA.","category":"page"}]
}
