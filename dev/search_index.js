var documenterSearchIndex = {"docs":
[{"location":"game_interface/#Game-Interface-1","page":"Game Interface","title":"Game Interface","text":"","category":"section"},{"location":"game_interface/#","page":"Game Interface","title":"Game Interface","text":"CurrentModule = AlphaZero.GameInterface","category":"page"},{"location":"game_interface/#","page":"Game Interface","title":"Game Interface","text":"The GameInterface module provides a generic interface for two-players, zero-sum, symmetric board games.","category":"page"},{"location":"game_interface/#","page":"Game Interface","title":"Game Interface","text":"Types, traits and constructors\nGame()\nGame(board)\nGame(board, white_playing)\nBase.copy(game)\nBoard(Game)\nAction(Game)\nGame functions\nwhite_playing(state)\nwhite_reward(state)\nboard(state)\nboard_symmetric(state)\navailable_actions(state)\nplay!(state, action)\nMachine learning interface\nvectorize_board(Game, board)\nnum_actions(Game)\naction_id(Game, action)\naction(Game, action_id)\nInterface for interactive tools\naction_string(Game, action)\nparse_action(Game, str)\nread_state(Game)\nprint_state(state)","category":"page"},{"location":"game_interface/#Types-1","page":"Game Interface","title":"Types","text":"","category":"section"},{"location":"game_interface/#","page":"Game Interface","title":"Game Interface","text":"AbstractGame\nBase.copy(::AbstractGame)\nBoard\nAction","category":"page"},{"location":"game_interface/#AlphaZero.GameInterface.AbstractGame","page":"Game Interface","title":"AlphaZero.GameInterface.AbstractGame","text":"AbstractGame\n\nAbstract base type for a game state.\n\nConstructors\n\nAny subtype Game must implement the following constructors:\n\n\n\nGame()\n\nReturn the initial state of the game.\n\n\n\nGame(board, white_playing=true)\n\nReturn the unique state specified by a board and a current player.\n\n\n\n\n\n","category":"type"},{"location":"game_interface/#Base.copy-Tuple{AlphaZero.GameInterface.AbstractGame}","page":"Game Interface","title":"Base.copy","text":"Base.copy(::AbstractGame)\n\nReturn a fresh copy of a game state.\n\n\n\n\n\n","category":"method"},{"location":"game_interface/#AlphaZero.GameInterface.Board","page":"Game Interface","title":"AlphaZero.GameInterface.Board","text":"Board(Game::Type{<:AbstractGame})\n\nReturn the board type corresponding to Game.\n\nBoard objects must be persistent or appear as such.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.Action","page":"Game Interface","title":"AlphaZero.GameInterface.Action","text":"Action(Game::Type{<:AbstractGame})\n\nReturn the action type corresponding to Game.\n\nActions must be \"symmetric\" in the following sense:\n\navailable_actions(s) ==\n  available_actions(Game(board_symmetric(s), !white_playing(s)))\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#Game-Functions-1","page":"Game Interface","title":"Game Functions","text":"","category":"section"},{"location":"game_interface/#","page":"Game Interface","title":"Game Interface","text":"white_playing\nwhite_reward\nboard\nboard_symmetric\navailable_actions\nplay!","category":"page"},{"location":"game_interface/#AlphaZero.GameInterface.white_playing","page":"Game Interface","title":"AlphaZero.GameInterface.white_playing","text":"white_playing(state::AbstractGame) :: Bool\n\nReturn true if white is to play and false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.white_reward","page":"Game Interface","title":"AlphaZero.GameInterface.white_reward","text":"white_reward(state::AbstractGame)\n\nReturn nothing if the game hasn't ended. Otherwise, return a reward for the white player as a number between -1 and 1.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.board","page":"Game Interface","title":"AlphaZero.GameInterface.board","text":"board(state::AbstractGame)\n\nReturn the game board.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.board_symmetric","page":"Game Interface","title":"AlphaZero.GameInterface.board_symmetric","text":"board_symmetric(state::AbstractGame)\n\nReturn the symmetric of the game board (where the roles of black and white are swapped).\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.available_actions","page":"Game Interface","title":"AlphaZero.GameInterface.available_actions","text":"available_actions(state::AbstractGame)\n\nReturn the vector of all available actions, which must be nonempty if isnothing(white_reward(state)).\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.play!","page":"Game Interface","title":"AlphaZero.GameInterface.play!","text":"play!(state::AbstractGame, action)\n\nUpdate the game state by making the current player perform action.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#Machine-Learning-Interface-1","page":"Game Interface","title":"Machine Learning Interface","text":"","category":"section"},{"location":"game_interface/#","page":"Game Interface","title":"Game Interface","text":"vectorize_board\nnum_actions\naction_id\naction","category":"page"},{"location":"game_interface/#AlphaZero.GameInterface.vectorize_board","page":"Game Interface","title":"AlphaZero.GameInterface.vectorize_board","text":"vectorize_board(::Type{<:AbstractGame}, board) :: Vector{Float32}\n\nReturn a vectorized representation of a board.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.num_actions","page":"Game Interface","title":"AlphaZero.GameInterface.num_actions","text":"num_actions(::Type{<:AbstractGame}) :: Int\n\nReturn the total number of actions for a game.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.action_id","page":"Game Interface","title":"AlphaZero.GameInterface.action_id","text":"action_id(G::Type{<:AbstractGame}, action) :: Int\n\nMap each action to a unique number in the range 1:num_actions(G).\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.action","page":"Game Interface","title":"AlphaZero.GameInterface.action","text":"action(::Type{<:AbstractGame}, Int)\n\nInverse function of action_id.\n\nMap an action identifier to an actual action.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#Interface-for-Interactive-Tools-1","page":"Game Interface","title":"Interface for Interactive Tools","text":"","category":"section"},{"location":"game_interface/#","page":"Game Interface","title":"Game Interface","text":"action_string\nparse_action\nread_state\nprint_state","category":"page"},{"location":"game_interface/#AlphaZero.GameInterface.action_string","page":"Game Interface","title":"AlphaZero.GameInterface.action_string","text":"action_string(::Type{<:AbstractGame}, action) :: String\n\nReturn a human-readable string representing the provided action.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.parse_action","page":"Game Interface","title":"AlphaZero.GameInterface.parse_action","text":"parse_action(::Type{<:AbstractGame}, str::String)\n\nReturn the action described by string str or nothing if str does not denote a valid action.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.read_state","page":"Game Interface","title":"AlphaZero.GameInterface.read_state","text":"read_state(::Type{G}) where G <: AbstractGame :: Union{G, Nothing}\n\nRead a state description from the standard input. Return the corresponding state or nothing in case of an invalid input.\n\n\n\n\n\n","category":"function"},{"location":"game_interface/#AlphaZero.GameInterface.print_state","page":"Game Interface","title":"AlphaZero.GameInterface.print_state","text":"print_state(state::AbstractGame)\n\nPrint a state on the standard output.\n\n\n\n\n\n","category":"function"},{"location":"misc/#Misc-1","page":"Misc","title":"Misc","text":"","category":"section"},{"location":"misc/#","page":"Misc","title":"Misc","text":"CurrentModule = AlphaZero","category":"page"},{"location":"misc/#","page":"Misc","title":"Misc","text":"Session\nSession(::Type{Game}, ::Type{Network}, params, netparams) where {Game, Network}\nSession(::Type{Game}, ::Type{Network}, dir) where {Game, Network}\nthink\npit","category":"page"},{"location":"misc/#AlphaZero.Session","page":"Misc","title":"AlphaZero.Session","text":"Session{Env}\n\nA basic user interface for AlphaZero environments.\n\n\n\n\n\n","category":"type"},{"location":"misc/#AlphaZero.Session-Union{Tuple{Network}, Tuple{Game}, Tuple{Type{Game},Type{Network},Any,Any}} where Network where Game","page":"Misc","title":"AlphaZero.Session","text":"Session(Game, Network, params, netparams;\n  dir=\"session\", autosave=true, validation=nothing)\n\nCreate a new session.\n\n\n\n\n\n","category":"method"},{"location":"misc/#AlphaZero.Session-Union{Tuple{Network}, Tuple{Game}, Tuple{Type{Game},Type{Network},Any}} where Network where Game","page":"Misc","title":"AlphaZero.Session","text":"Session(Game, Network, dir; autosave=true, validation=nothing)\n\nLoad an existing session from a directory.\n\n\n\n\n\n","category":"method"},{"location":"misc/#AlphaZero.think","page":"Misc","title":"AlphaZero.think","text":"think(::AbstractPlayer, state, turn_number::Int)\n\nReturn an (action, π) pair where action is the chosen action and π a probability distribution over available actions.\n\nNote that a does not have to be drawn from π.\n\n\n\n\n\n","category":"function"},{"location":"misc/#AlphaZero.pit","page":"Misc","title":"AlphaZero.pit","text":"pit(handler, baseline, contender, ngames [, reset_period])\n\nEvaluate two players against each other on a series of games, alternating colors.\n\nArguments\n\nhandler: this function is called after each simulated  game with two arguments: the game number i and the collected reward z  for the contender player\nbaseline, contender :: AbstractPlayer\nngames: number of games to play\nreset_period: if set, players are reset every reset_period games\n\n\n\n\n\n","category":"function"},{"location":"mcts/#MCTS-1","page":"MCTS","title":"MCTS","text":"","category":"section"},{"location":"mcts/#","page":"MCTS","title":"MCTS","text":"A generic, standalone implementation of asynchronous Monte Carlo Tree Search. It can be used on any game that implements the GameInterface interface and with any external oracle.","category":"page"},{"location":"mcts/#","page":"MCTS","title":"MCTS","text":"CurrentModule = AlphaZero.MCTS","category":"page"},{"location":"mcts/#Oracles-1","page":"MCTS","title":"Oracles","text":"","category":"section"},{"location":"mcts/#","page":"MCTS","title":"MCTS","text":"Oracle\nevaluate\nevaluate_batch\nRolloutOracle","category":"page"},{"location":"mcts/#AlphaZero.MCTS.Oracle","page":"MCTS","title":"AlphaZero.MCTS.Oracle","text":"MCTS.Oracle{Game}\n\nAbstract base type for an oracle. Oracles must implement MCTS.evaluate and MCTS.evaluate_batch.\n\n\n\n\n\n","category":"type"},{"location":"mcts/#AlphaZero.MCTS.evaluate","page":"MCTS","title":"AlphaZero.MCTS.evaluate","text":"MCTS.evaluate(oracle::Oracle, board, available_actions)\n\nEvaluate a single board position (assuming white is playing).\n\nReturn a pair (P, V) where:\n\nP is a probability vector on available actions\nV is a scalar estimating the value or win probability for white.\n\n\n\n\n\n","category":"function"},{"location":"mcts/#AlphaZero.MCTS.evaluate_batch","page":"MCTS","title":"AlphaZero.MCTS.evaluate_batch","text":"MCTS.evaluate_batch(oracle::Oracle, batch)\n\nEvaluate a batch of board positions.\n\nExpect a vector of (board, available_actions) pairs and return a vector of (P, V) pairs.\n\nA default implementation is provided that calls MCTS.evaluate sequentially on each position.\n\n\n\n\n\nMCTS.evaluate_batch(::AbstractNetwork, batch)\n\nEvaluate a batch of positions. See MCTS.evaluate_batch(::MCTS.Oracle).\n\n\n\n\n\n","category":"function"},{"location":"mcts/#AlphaZero.MCTS.RolloutOracle","page":"MCTS","title":"AlphaZero.MCTS.RolloutOracle","text":"MCTS.RolloutOracle{Game} <: MCTS.Oracle{Game}\n\nThis oracle estimates the value of a position by simulating a random game from it (a rollout). Moreover, it puts a uniform prior on available actions. Therefore, it can be used to implement the \"vanilla\" MCTS algorithm.\n\n\n\n\n\n","category":"type"},{"location":"mcts/#Environment-1","page":"MCTS","title":"Environment","text":"","category":"section"},{"location":"mcts/#","page":"MCTS","title":"MCTS","text":"Env\nexplore!\npolicy\nreset!","category":"page"},{"location":"mcts/#AlphaZero.MCTS.Env","page":"MCTS","title":"AlphaZero.MCTS.Env","text":"MCTS.Env{Game}(oracle; nworkers=1, fill_batches=false, cpuct=1.) where Game\n\nCreate and initialize an MCTS environment.\n\nArguments\n\noracle: external oracle\nnworkers: numbers of asynchronous workers (see below)\nfill_batches: if true, a constant batch size is enforced for evaluation  requests, by completing batches with dummy entries if necessary\ncpuct: exploration constant (in the UCT formula)\n\nAsynchronous MCTS\n\nIf nworkers == 1, MCTS is run in a synchronous fashion and the oracle is invoked through MCTS.evaluate.\nIf nworkers > 1, nworkers asynchronous workers are spawned, along with an additional task to serve board evaluation requests. Such requests are processed by batches of size nworkers using MCTS.evaluate_batch.\n\n\n\n\n\n","category":"type"},{"location":"mcts/#AlphaZero.MCTS.explore!","page":"MCTS","title":"AlphaZero.MCTS.explore!","text":"MCTS.explore!(env, state, nsims)\n\nRun nsims MCTS iterations from state.\n\nIn case there are multiple workers, nsims is rounded up to the nearest integer multiple of the number of workers.\n\n\n\n\n\n","category":"function"},{"location":"mcts/#AlphaZero.MCTS.policy","page":"MCTS","title":"AlphaZero.MCTS.policy","text":"MCTS.policy(env, state; τ=1.)\n\nReturn the recommended stochastic policy on state, with temperature parameter equal to τ.\n\nA call to this function must always be preceded by a call to MCTS.explore!.\n\n\n\n\n\n","category":"function"},{"location":"mcts/#AlphaZero.MCTS.reset!","page":"MCTS","title":"AlphaZero.MCTS.reset!","text":"MCTS.reset!(env)\n\nEmpty the MCTS tree.\n\n\n\n\n\n","category":"function"},{"location":"mcts/#Profiling-utilities-1","page":"MCTS","title":"Profiling utilities","text":"","category":"section"},{"location":"mcts/#","page":"MCTS","title":"MCTS","text":"inference_time_ratio\nmemory_footprint_per_node\napproximate_memory_footprint\naverage_exploration_depth","category":"page"},{"location":"mcts/#AlphaZero.MCTS.inference_time_ratio","page":"MCTS","title":"AlphaZero.MCTS.inference_time_ratio","text":"MCTS.inference_time_ratio(env)\n\nReturn the ratio of time spent by MCTS.explore! on position evaluation (through functions MCTS.evaluate or MCTS.evaluate_batch) since the environment's creation.\n\n\n\n\n\n","category":"function"},{"location":"mcts/#AlphaZero.MCTS.memory_footprint_per_node","page":"MCTS","title":"AlphaZero.MCTS.memory_footprint_per_node","text":"MCTS.memory_footprint_per_node(env)\n\nReturn an estimate of the memory footprint of a single node of the MCTS tree (in bytes).\n\n\n\n\n\n","category":"function"},{"location":"mcts/#AlphaZero.MCTS.approximate_memory_footprint","page":"MCTS","title":"AlphaZero.MCTS.approximate_memory_footprint","text":"MCTS.approximate_memory_footprint(env)\n\nReturn an estimate of the memory footprint of the MCTS tree (in bytes).\n\n\n\n\n\n","category":"function"},{"location":"mcts/#AlphaZero.MCTS.average_exploration_depth","page":"MCTS","title":"AlphaZero.MCTS.average_exploration_depth","text":"MCTS.average_exploration_depth(env)\n\nReturn the average number of nodes that are traversed during an MCTS iteration, not counting the root.\n\n\n\n\n\n","category":"function"},{"location":"#AlphaZero-1","page":"AlphaZero","title":"AlphaZero","text":"","category":"section"},{"location":"#","page":"AlphaZero","title":"AlphaZero","text":"CurrentModule = AlphaZero","category":"page"},{"location":"#Modules-1","page":"AlphaZero","title":"Modules","text":"","category":"section"},{"location":"#","page":"AlphaZero","title":"AlphaZero","text":"MCTS\nGameInterface\nNetwork","category":"page"},{"location":"#AlphaZero.MCTS","page":"AlphaZero","title":"AlphaZero.MCTS","text":"A generic, standalone implementation of asynchronous Monte Carlo Tree Search. It can be used on any game that implements the GameInterface interface and with any external oracle.\n\n\n\n\n\n","category":"module"},{"location":"#AlphaZero.GameInterface","page":"AlphaZero","title":"AlphaZero.GameInterface","text":"A generic interface for zero-sum, symmetric games.\n\n\n\n\n\n","category":"module"},{"location":"#AlphaZero.Network","page":"AlphaZero","title":"AlphaZero.Network","text":"A generic, framework agnostic interface for neural networks.\n\n\n\n\n\n","category":"module"},{"location":"network/#Network-Interface-1","page":"Network Interface","title":"Network Interface","text":"","category":"section"},{"location":"network/#","page":"Network Interface","title":"Network Interface","text":"CurrentModule = AlphaZero.Network","category":"page"},{"location":"network/#","page":"Network Interface","title":"Network Interface","text":"This module defines a generic, framework-agnostic interface for neural network oracles.","category":"page"},{"location":"network/#Mandatory-interface-1","page":"Network Interface","title":"Mandatory interface","text":"","category":"section"},{"location":"network/#","page":"Network Interface","title":"Network Interface","text":"AbstractNetwork\nHyperParams\nhyperparams\nforward\ntrain!\nset_test_mode!\nparams\nregularized_params","category":"page"},{"location":"network/#AlphaZero.Network.AbstractNetwork","page":"Network Interface","title":"AlphaZero.Network.AbstractNetwork","text":"AbstractNetwork{Game} <: MCTS.Oracle{Game}\n\nAbstract base type for a neural network.\n\n\n\nAny subtype Network must implement the following constructor:\n\nNetwork(hyperparams)\n\nwhere the expected type of hyperparams is given by HyperParams(Network).\n\n\n\n\n\n","category":"type"},{"location":"network/#AlphaZero.Network.HyperParams","page":"Network Interface","title":"AlphaZero.Network.HyperParams","text":"HyperParams(::Type{<:AbstractNetwork})\n\nReturn the hyperparameter type associated with a given network type.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.hyperparams","page":"Network Interface","title":"AlphaZero.Network.hyperparams","text":"hyperparams(::AbstractNetwork)\n\nReturn the hyperparameters of a network.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.forward","page":"Network Interface","title":"AlphaZero.Network.forward","text":"forward(::AbstractNetwork, boards)\n\nCompute the forward pass of the network on a batch of inputs.\n\nExpect a Float32 tensor boards whose batch dimension is the last one.\n\nReturn a (P, V) triple where:\n\nP is a matrix of size (num_actions, batch_size). It is allowed to put weight on invalid actions (see evaluate).\nV is a row vector of size (1, batch_size)\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.train!","page":"Network Interface","title":"AlphaZero.Network.train!","text":"train!(::AbstractNetwork, loss, data, learning_rate)\n\nTrain a given network on data.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.set_test_mode!","page":"Network Interface","title":"AlphaZero.Network.set_test_mode!","text":"set_test_mode!(mode=true)\n\nPut a network in test mode or in training mode. This is relevant for networks featuring layers such as batch normalization layers.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.params","page":"Network Interface","title":"AlphaZero.Network.params","text":"params(::AbstractNetwork)\n\nReturn the collection of trainable parameters of the network.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.regularized_params","page":"Network Interface","title":"AlphaZero.Network.regularized_params","text":"regularized_params(::AbstractNetwork)\n\nReturn the collection of regularized parameters of a network. This usually excludes neuron's biases.\n\n\n\n\n\n","category":"function"},{"location":"network/#Conversion-and-copy-1","page":"Network Interface","title":"Conversion and copy","text":"","category":"section"},{"location":"network/#","page":"Network Interface","title":"Network Interface","text":"Base.copy(::AbstractNetwork)\nto_gpu\nto_cpu\non_gpu\nconvert_input\nconvert_output","category":"page"},{"location":"network/#Base.copy-Tuple{AlphaZero.Network.AbstractNetwork}","page":"Network Interface","title":"Base.copy","text":"Base.copy(::AbstractNetwork)\n\nReturn a copy of the given network.\n\n\n\n\n\n","category":"method"},{"location":"network/#AlphaZero.Network.to_gpu","page":"Network Interface","title":"AlphaZero.Network.to_gpu","text":"to_gpu(::AbstractNetwork)\n\nReturn a copy of the given network that has been transferred to the GPU if one is available. Otherwise, return the given network untouched.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.to_cpu","page":"Network Interface","title":"AlphaZero.Network.to_cpu","text":"to_cpu(::AbstractNetwork)\n\nReturn a copy of the given network that has been transferred to the CPU or return the given network untouched if it is already on CPU.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.on_gpu","page":"Network Interface","title":"AlphaZero.Network.on_gpu","text":"on_gpu(::AbstractNetwork)\n\nTest if a network is located on GPU.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.convert_input","page":"Network Interface","title":"AlphaZero.Network.convert_input","text":"convert_input(::AbstractNetwork, input)\n\nConvert an array (or number) to the right format so that it can be used as an input by a given network.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.convert_output","page":"Network Interface","title":"AlphaZero.Network.convert_output","text":"convert_output(::AbstractNetwork, output)\n\nConvert an array (or number) produced by a neural network to a standard CPU array (or number) type.\n\n\n\n\n\n","category":"function"},{"location":"network/#Misc-1","page":"Network Interface","title":"Misc","text":"","category":"section"},{"location":"network/#","page":"Network Interface","title":"Network Interface","text":"gc","category":"page"},{"location":"network/#AlphaZero.Network.gc","page":"Network Interface","title":"AlphaZero.Network.gc","text":"gc(::AbstractNetwork)\n\nPerform full garbage collection.\n\n\n\n\n\n","category":"function"},{"location":"network/#Derived-functions-1","page":"Network Interface","title":"Derived functions","text":"","category":"section"},{"location":"network/#Evaluation-function-1","page":"Network Interface","title":"Evaluation function","text":"","category":"section"},{"location":"network/#","page":"Network Interface","title":"Network Interface","text":"evaluate","category":"page"},{"location":"network/#AlphaZero.Network.evaluate","page":"Network Interface","title":"AlphaZero.Network.evaluate","text":"evaluate(network::AbstractNetwork, boards, action_masks)\n\nEvaluate a batch of board positions. This function is a wrapper on forward that puts a zero weight on invalid actions.\n\nArguments\n\nboards is a tensor whose last dimension has size bach_size\naction_masks is a binary matrix of size (num_actions, batch_size)\n\nReturn\n\nReturn a (P, V, Pinv) triple where:\n\nP is a matrix of size (num_actions, batch_size).\nV is a row vector of size (1, batch_size).\nPinv is a row vector of size (1, batch_size)  that indicates the total probability weight put by the network  on invalid actions for each sample.\n\nAll tensors manipulated by this function have type Float32.\n\n\n\n\n\n","category":"function"},{"location":"network/#Oracle-interface-1","page":"Network Interface","title":"Oracle interface","text":"","category":"section"},{"location":"network/#","page":"Network Interface","title":"Network Interface","text":"MCTS.evaluate(::AbstractNetwork)\nMCTS.evaluate_batch(::AbstractNetwork)","category":"page"},{"location":"network/#AlphaZero.MCTS.evaluate-Tuple{AlphaZero.Network.AbstractNetwork}","page":"Network Interface","title":"AlphaZero.MCTS.evaluate","text":"MCTS.evaluate(::AbstractNetwork, board, available_actions)\n\nEvaluate a single board position. See MCTS.evaluate(::MCTS.Oracle).\n\nwarning: Warning\nEvaluating a neural network on a single sample at a time is slow. When possible, use MCTS.evaluate_batch instead.\n\n\n\n\n\n","category":"method"},{"location":"network/#AlphaZero.MCTS.evaluate_batch-Tuple{AlphaZero.Network.AbstractNetwork}","page":"Network Interface","title":"AlphaZero.MCTS.evaluate_batch","text":"MCTS.evaluate_batch(::AbstractNetwork, batch)\n\nEvaluate a batch of positions. See MCTS.evaluate_batch(::MCTS.Oracle).\n\n\n\n\n\n","category":"method"},{"location":"network/#Misc-2","page":"Network Interface","title":"Misc","text":"","category":"section"},{"location":"network/#","page":"Network Interface","title":"Network Interface","text":"num_parameters\nnum_regularized_parameters\nmean_weight\ncopy(::AbstractNetwork)","category":"page"},{"location":"network/#AlphaZero.Network.num_parameters","page":"Network Interface","title":"AlphaZero.Network.num_parameters","text":"num_parameters(::AbstractNetwork)\n\nReturn the total number of parameters of a network.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.num_regularized_parameters","page":"Network Interface","title":"AlphaZero.Network.num_regularized_parameters","text":"num_regularized_parameters(::AbstractNetwork)\n\nReturn the total number of regularized parameters of a network.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.mean_weight","page":"Network Interface","title":"AlphaZero.Network.mean_weight","text":"mean_weight(::AbstractNetwork)\n\nReturn the mean absolute value of the regularized parameters of a network.\n\n\n\n\n\n","category":"function"},{"location":"network/#AlphaZero.Network.copy-Tuple{AlphaZero.Network.AbstractNetwork}","page":"Network Interface","title":"AlphaZero.Network.copy","text":"copy(::AbstractNetwork; on_gpu, test_mode)\n\nA copy function that also handles CPU/GPU transfers and test/train mode switches.\n\n\n\n\n\n","category":"method"}]
}
